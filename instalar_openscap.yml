---
# playbooks/instalar_herramientas_seguridad.yml

- name: Leer y procesar el inventario CSV para instalar herramientas de seguridad
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/inventario.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^#|^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts_seguridad'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts_seguridad
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_become: yes
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Mostrar estructura completa de csv_data
      debug:
        var: csv_data

- name: Instalar herramientas de seguridad en los hosts dinámicos
  hosts: dynamic_hosts_seguridad
  gather_facts: yes
  become: yes  # Se asume que el usuario tiene privilegios sudo sin contraseña
  vars:
    distribuciones_paquetes:
      Ubuntu:
        - libopenscap8
        - git
        - cmake
        - make
        - gcc
        - bzip2
      Debian:
        - libopenscap8
        - git
        - cmake
        - make
        - gcc
        - bzip2
      CentOS:
        - openscap-scanner
        - scap-security-guide
      RedHat:
        - openscap-scanner
        - scap-security-guide
      Fedora:
        - openscap
        - scap-security-guide
      SUSE:
        - suse-manager-client
  tasks:
    - name: Depurar la distribución del sistema
      debug:
        msg: "Distribución detectada: {{ ansible_distribution }} {{ ansible_distribution_version }}"

    # Definir paquetes a instalar según la distribución
    - name: Definir paquetes necesarios para la distribución
      set_fact:
        paquetes_a_instalar: "{{ distribuciones_paquetes[ansible_distribution] | default([]) }}"

    - name: Mostrar paquetes a instalar para {{ ansible_distribution }}
      debug:
        msg: "Paquetes a instalar para {{ ansible_distribution }}: {{ paquetes_a_instalar }}"

    # Habilitar repositorios universe para Ubuntu
    - name: Habilitar repositorios universe
      when: ansible_distribution == "Ubuntu"
      apt_repository:
        repo: "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }} universe"
        state: present

    # Actualizar la lista de paquetes para Ubuntu/Debian
    - name: Actualizar la lista de paquetes
      when: ansible_distribution in ["Ubuntu", "Debian"]
      apt:
        update_cache: yes

    # Instalación de dependencias para Ubuntu/Debian
    - name: Instalar dependencias para Ubuntu/Debian
      when: ansible_distribution in ["Ubuntu", "Debian"]
      apt:
        name: "{{ paquetes_a_instalar }}"
        state: present

    # Clonar el repositorio de SCAP Security Guide
    - name: Clonar el repositorio de SCAP Security Guide
      when: ansible_distribution in ["Ubuntu", "Debian"]
      git:
        repo: https://github.com/ComplianceAsCode/content.git
        dest: /tmp/scap-security-guide
        version: master

    # Compilar SCAP Security Guide
    - name: Compilar SCAP Security Guide
      when: ansible_distribution in ["Ubuntu", "Debian"]
      shell: |
        cd /tmp/scap-security-guide
        mkdir build
        cd build
        cmake ..
        make -j4
      args:
        chdir: /tmp/scap-security-guide

    # Copiar DataStream a /usr/share/openscap
    - name: Copiar DataStream SCAP a /usr/share/openscap
      when: ansible_distribution in ["Ubuntu", "Debian"]
      copy:
        src: /tmp/scap-security-guide/build/ssg-ubuntu-*.xml
        dest: /usr/share/openscap/
        mode: '0644'

    # Instalación de OpenSCAP para CentOS/RHEL/Fedora
    - name: Instalar paquetes necesarios para CentOS/RHEL/Fedora
      when: ansible_distribution in ["CentOS", "RedHat", "Fedora"]
      package:
        name: "{{ paquetes_a_instalar }}"
        state: present

    # Instalación de SUSE Manager para SUSE
    - name: Instalar paquetes necesarios para SUSE
      when: ansible_distribution == "SUSE"
      package:
        name: "{{ paquetes_a_instalar }}"
        state: present

    # Verificar instalación de oscap
    - name: Verificar instalación de oscap
      command: which oscap
      register: scap_installed
      ignore_errors: yes

    - name: Asegurarse de que oscap está instalado
      fail:
        msg: "oscap no se pudo instalar en {{ inventory_hostname }}"
      when: scap_installed.rc != 0

    - name: Mostrar mensaje de éxito
      debug:
        msg: "La herramienta de seguridad se instaló correctamente en {{ ansible_distribution }} {{ ansible_distribution_version }}"
