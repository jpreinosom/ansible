---
# playbooks/instalar_openscap.yml

- name: Leer y procesar el inventario CSV para instalar OpenSCAP
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/inventario.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^#|^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts_openscap'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts_openscap
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Mostrar estructura completa de csv_data
      debug:
        var: csv_data

- name: Instalar OpenSCAP y scap-security-guide en los hosts dinámicos
  hosts: dynamic_hosts_openscap
  gather_facts: yes
  become: yes
  tasks:
    - name: Depurar la distribución del sistema
      debug:
        msg: "Distribución detectada: {{ ansible_distribution }} {{ ansible_distribution_version }}"

    # Habilitar repositorios específicos según la distribución
    - name: Habilitar los repositorios "universe" y "multiverse" en Ubuntu
      apt_repository:
        repo: "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }} main universe multiverse"
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Actualizar la lista de paquetes (solo para Ubuntu)
      apt:
        update_cache: yes
        cache_valid_time: 3600  # Tiempo en segundos para validar el cache
      when: ansible_distribution == "Ubuntu"

    # Habilitar el repositorio EPEL en CentOS/RHEL
    - name: Determinar la versión de EPEL basada en la versión de RHEL/CentOS
      set_fact:
        epel_url: >-
          {% if ansible_distribution_major_version | int == 7 %}
            https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          {% elif ansible_distribution_major_version | int == 8 %}
            https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
          {% elif ansible_distribution_major_version | int == 9 %}
            https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
          {% else %}
            https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
          {% endif %}
        epel_gpg_key_url: >-
          {% if ansible_distribution_major_version | int == 7 %}
            https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7
          {% elif ansible_distribution_major_version | int == 8 %}
            https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-8
          {% elif ansible_distribution_major_version | int == 9 %}
            https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9
          {% else %}
            https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9
          {% endif %}

    - name: Descargar y importar la clave GPG de EPEL
      block:
        - name: Descargar la clave GPG de EPEL
          get_url:
            url: "{{ epel_gpg_key_url }}"
            dest: /tmp/RPM-GPG-KEY-EPEL
          register: download_epel_gpg
          retries: 3
          delay: 5
          until: download_epel_gpg is succeeded

        - name: Importar la clave GPG de EPEL
          rpm_key:
            state: present
            key: /tmp/RPM-GPG-KEY-EPEL

        - name: Limpiar el archivo de la clave GPG de EPEL
          file:
            path: /tmp/RPM-GPG-KEY-EPEL
            state: absent
      when: ansible_os_family == "RedHat"

    - name: Descargar EPEL-release para CentOS/RHEL
      get_url:
        url: "{{ epel_url }}"
        dest: /tmp/epel-release-latest.noarch.rpm
      register: download_epel
      retries: 3
      delay: 5
      until: download_epel is succeeded
      when: ansible_os_family == "RedHat"

    - name: Instalar el paquete EPEL-release
      yum:
        name: /tmp/epel-release-latest.noarch.rpm
        state: present
      when: ansible_os_family == "RedHat"

    - name: Limpiar el archivo descargado de EPEL-release
      file:
        path: /tmp/epel-release-latest.noarch.rpm
        state: absent
      when: ansible_os_family == "RedHat"

    - name: Actualizar la lista de paquetes (solo para CentOS/RHEL/Fedora)
      yum:
        name: "*"
        state: latest
        update_cache: yes
      when: ansible_os_family == "RedHat"

    # Verificar disponibilidad de 'scap-security-guide' en RHEL/CentOS
    - name: Verificar disponibilidad de 'scap-security-guide' en RHEL/CentOS
      when: ansible_os_family == "RedHat"
      command: yum list available scap-security-guide
      register: scap_check_rhel
      ignore_errors: yes

    - name: Mostrar estado del paquete 'scap-security-guide' en RHEL/CentOS
      debug:
        msg: "Estado de 'scap-security-guide': {{ scap_check_rhel.stdout }}"
      when: ansible_os_family == "RedHat"

    - name: Fallar si 'scap-security-guide' no está disponible en RHEL/CentOS
      fail:
        msg: "El paquete 'scap-security-guide' no está disponible en {{ ansible_distribution }} {{ ansible_distribution_version }}"
      when:
        - ansible_os_family == "RedHat"
        - scap_check_rhel.rc != 0

    # Definir paquetes necesarios para OpenSCAP y scap-security-guide
    - name: Definir paquetes necesarios para OpenSCAP y scap-security-guide
      set_fact:
        openscap_packages: "{{ distribuciones_paquetes[ansible_distribution] | default([]) }}"
        # Para Ubuntu, usar 'ssg-base' en lugar de 'scap-security-guide'
        scap_security_guide: "{{ 'ssg-base' if ansible_distribution == 'Ubuntu' else 'scap-security-guide' }}"

    - name: Mostrar paquetes a instalar para OpenSCAP y scap-security-guide
      debug:
        msg: "Paquetes a instalar para {{ ansible_distribution }}: {{ openscap_packages }} y {{ scap_security_guide }}"

    # Instalar paquetes en Ubuntu/Debian
    - name: Instalar paquetes necesarios para OpenSCAP y ssg-base (Ubuntu/Debian)
      apt:
        name: "{{ openscap_packages + [scap_security_guide] }}"
        state: present
      when: 
        - (ansible_distribution == "Ubuntu" or ansible_os_family == "Debian")
        - openscap_packages | length > 0
      ignore_errors: yes

    - name: Fallar si 'ssg-base' no está disponible en Ubuntu
      fail:
        msg: "El paquete '{{ scap_security_guide }}' no está disponible en {{ ansible_distribution }} {{ ansible_distribution_version }}"
      when:
        - (ansible_distribution == "Ubuntu" or ansible_os_family == "Debian")
        - scap_security_guide == 'ssg-base'
        - "'ssg-base' not in ansible_facts.packages"

    # Instalar paquetes en CentOS/RHEL
    - name: Instalar paquetes necesarios para OpenSCAP y scap-security-guide (CentOS/RHEL)
      yum:
        name: "{{ openscap_packages + [scap_security_guide] }}"
        state: present
      when: ansible_os_family == "RedHat" and openscap_packages | length > 0

    # Instalar paquetes en Fedora
    - name: Instalar paquetes necesarios para OpenSCAP y scap-security-guide (Fedora)
      dnf:
        name: "{{ openscap_packages + [scap_security_guide] }}"
        state: present
      when: ansible_distribution == "Fedora" and openscap_packages | length > 0

    # Verificar instalación de OpenSCAP
    - name: Verificar instalación de OpenSCAP
      command: which oscap
      register: openscap_installed
      ignore_errors: yes

    - name: Establecer el estado de instalación
      set_fact:
        openscap_instalado: "{{ openscap_installed.rc == 0 }}"
      when: openscap_installed.rc is defined

    - name: Asegurarse de que OpenSCAP está instalado
      fail:
        msg: "OpenSCAP no se pudo instalar en {{ ansible_distribution }} {{ ansible_distribution_version }}"
      when: not openscap_instalado

    - name: Mostrar mensaje de éxito
      debug:
        msg: "OpenSCAP y scap-security-guide se instalaron correctamente en {{ ansible_distribution }} {{ ansible_distribution_version }}"
