---
# playbooks/analizar_vulnerabilidades.yml

- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/inventario.csv"
    grafana_file: "{{ playbook_dir }}/inventory/grafana.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo CSV de inventario existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV de inventario
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV de inventario
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV de inventario
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Verificar que el archivo Grafana CSV existe
      stat:
        path: "{{ grafana_file }}"
      register: grafana_file_check

    - name: Fallar si el archivo Grafana CSV no existe
      fail:
        msg: "El archivo Grafana CSV {{ grafana_file }} no existe."
      when: not grafana_file_check.stat.exists

    - name: Leer contenido del archivo Grafana CSV
      set_fact:
        grafana_csv_content: "{{ lookup('file', grafana_file) }}"

    - name: Extraer encabezados del archivo Grafana CSV
      set_fact:
        grafana_headers: "{{ grafana_csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del archivo Grafana CSV
      set_fact:
        grafana_rows: "{{ grafana_csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila del Grafana CSV tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados en Grafana CSV."
      when: row | length != grafana_headers | length
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas del Grafana CSV para crear diccionarios
      set_fact:
        grafana_csv_data: "{{ grafana_csv_data | default([]) + [ dict(grafana_headers | zip(row)) ] }}"
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
        remote_tmp: /tmp/ansible
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ grafana_csv_data }}"
      loop_control:
        loop_var: item

- name: Ejecutar análisis de vulnerabilidades con OpenSCAP en dynamic_hosts
  hosts: dynamic_hosts
  gather_facts: yes
  become: yes
  tasks:
    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP en paralelo
      command:
        argv:
          - oscap
          - xccdf
          - eval
          - '--profile'
          - 'xccdf_org.ssgproject.content_profile_cis_server_l1'
          - '--results'
          - "/tmp/openscap-results-{{ ansible_host }}.xml"
          - '--report'
          - "/tmp/openscap-report-{{ ansible_host }}.html"
          - "/usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}-ds.xml"
      async: 3600   # Timeout de 1 hora
      poll: 0
      register: scan_result

    - name: Esperar a que terminen todos los análisis de vulnerabilidades
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_results
      until: job_results.finished
      retries: 60  # Reintentos hasta que termine la tarea
      delay: 10
      loop: "{{ scan_result.results }}"

    - name: Verificar si el archivo de resultados existe
      stat:
        path: "/tmp/openscap-results-{{ ansible_host }}.xml"
      register: results_file_check
      when: job_results.finished

    - name: Fallar si el análisis no generó el archivo de resultados
      fail:
        msg: "El archivo de resultados de OpenSCAP no se generó en {{ ansible_host }}."
      when:
        - not results_file_check.stat.exists

- name: Guardar vulnerabilidades en la base de datos
  hosts: grafana_hosts
  gather_facts: no
  vars:
    vulnerability_user: "grafana_user"
    vulnerability_db: "grafana_db"
    vulnerability_password: "grafana_password"
  tasks:
    - name: Recolectar todos los datos de vulnerabilidades de los dynamic_hosts
      set_fact:
        all_vulnerability_data: "{{ all_vulnerability_data | default([]) + hostvars[item].host_vulnerabilities }}"
      loop: "{{ groups['dynamic_hosts'] }}"
      when: hostvars[item].host_vulnerabilities is defined

    - name: Depurar all_vulnerability_data
      debug:
        var: all_vulnerability_data

    - name: Generar archivo SQL para inserciones
      copy:
        dest: /tmp/insert_vulnerabilities.sql
        content: |
          {% for vuln in all_vulnerability_data %}
          INSERT INTO vulnerabilidades (detalle, categoria, resultado, ip) VALUES ('{{ vuln.idref | replace("'", "''") }}', '{{ vuln.severity | replace("'", "''") }}', '{{ vuln.result | replace("'", "''") }}', '{{ vuln.ip }}');
          {% endfor %}
      when: all_vulnerability_data | length > 0

    - name: Ejecutar archivo SQL
      command: psql -U {{ vulnerability_user }} -d {{ vulnerability_db }} -f /tmp/insert_vulnerabilities.sql
      environment:
        PGPASSWORD: "{{ vulnerability_password }}"
      when: all_vulnerability_data | length > 0
