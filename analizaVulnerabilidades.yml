---
# playbooks/analizar_vulnerabilidades.yml

- name: Ejecutar análisis de vulnerabilidades con OpenSCAP en dynamic_hosts
  hosts: dynamic_hosts
  gather_facts: yes
  become: yes
  tasks:
    - name: Depurar ansible_distribution
      debug:
        var: ansible_distribution

    - name: Verificar si awk está instalado
      command: which awk
      register: awk_check
      ignore_errors: yes

    - name: Instalar awk si no está instalado
      package:
        name: gawk
        state: present
      when: awk_check.failed

    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP (RHEL/CentOS)
      command:
        argv:
          - oscap
          - xccdf
          - eval
          - '--profile'
          - 'xccdf_org.ssgproject.content_profile_cis_server_l1'
          - '--results'
          - '/tmp/openscap-results.xml'
          - '--report'
          - '/tmp/openscap-report.html'
          - '/usr/share/xml/scap/ssg/content/ssg-rhel9-ds.xml'
      register: scan_result_rhel
      changed_when: false
      failed_when: false
      when: ansible_distribution in ["RedHat", "OracleLinux", "AlmaLinux", "RockyLinux", "CentOS"]

    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP (Ubuntu/Debian)
      command:
        argv:
          - oscap
          - xccdf
          - eval
          - '--profile'
          - 'xccdf_org.ssgproject.content_profile_cis_level2_server'
          - '--results'
          - '/tmp/openscap-results.xml'
          - '--report'
          - '/tmp/openscap-report.html'
          - '/usr/share/xml/scap/ssg/content/ssg-ubuntu2204-ds-1.2.xml'
      register: scan_result_ubuntu
      changed_when: false
      failed_when: false
      when: ansible_distribution in ["Ubuntu", "Debian"]

    - name: Verificar si el archivo de resultados existe (RHEL/CentOS)
      stat:
        path: /tmp/openscap-results.xml
      register: results_file_check_rhel
      when: ansible_distribution in ["RedHat", "OracleLinux", "AlmaLinux", "RockyLinux", "CentOS"]

    - name: Verificar si el archivo de resultados existe (Ubuntu/Debian)
      stat:
        path: /tmp/openscap-results.xml
      register: results_file_check_ubuntu
      when: ansible_distribution in ["Ubuntu", "Debian"]

    - name: Fallar si el análisis no generó el archivo de resultados (RHEL/CentOS)
      fail:
        msg: "El archivo de resultados de OpenSCAP no se generó en {{ inventory_hostname }}."
      when:
        - ansible_distribution in ["RedHat", "OracleLinux", "AlmaLinux", "RockyLinux", "CentOS"]
        - not results_file_check_rhel.stat.exists

    - name: Fallar si el análisis no generó el archivo de resultados (Ubuntu/Debian)
      fail:
        msg: "El archivo de resultados de OpenSCAP no se generó en {{ inventory_hostname }}."
      when:
        - ansible_distribution in ["Ubuntu", "Debian"]
        - not results_file_check_ubuntu.stat.exists

    - name: Extraer valores del archivo de resultados XML
      shell: |
        awk '
          /<rule-result / {
            match($0, /idref="([^"]+)"/, a)
            idref = a[1]
            match($0, /severity="([^"]+)"/, b)
            severity = b[1]
          }
          /<result>/ {
            match($0, /<result>([^<]+)<\/result>/, c)
            result = c[1]
            if (result == "fail" || result == "pass") {
              print idref "," result "," severity
            }
          }
        ' /tmp/openscap-results.xml
      register: xml_vuln_data
      when: 
        - (ansible_distribution in ["RedHat", "OracleLinux", "AlmaLinux", "RockyLinux", "CentOS"] and results_file_check_rhel.stat.exists) or
        - (ansible_distribution in ["Ubuntu", "Debian"] and results_file_check_ubuntu.stat.exists)

    - name: Depurar xml_vuln_data.stdout
      debug:
        var: xml_vuln_data.stdout
      when: xml_vuln_data.stdout is defined

    - name: Parse vulnerability data
      set_fact:
        vulnerability_data_host: "{{ vulnerability_data_host | default([]) + [{'idref': idref, 'result': result, 'severity': severity, 'ip': ansible_host}] }}"
      vars:
        idref: "{{ item.split(',')[0] }}"
        result: "{{ item.split(',')[1] }}"
        severity: "{{ item.split(',')[2] }}"
      loop: "{{ xml_vuln_data.stdout_lines }}"
      when: xml_vuln_data.stdout

    - name: Guardar vulnerabilidades en una variable para cada host
      set_fact:
        host_vulnerabilities: "{{ vulnerability_data_host }}"
      when: vulnerability_data_host is defined

    - name: Depurar host_vulnerabilities
      debug:
        var: host_vulnerabilities
      when: host_vulnerabilities is defined

- name: Guardar vulnerabilidades en la base de datos
  hosts: grafana_hosts
  gather_facts: no
  tasks:
    - name: Recolectar todos los datos de vulnerabilidades de los dynamic_hosts
      set_fact:
        all_vulnerability_data: "{{ all_vulnerability_data | default([]) + hostvars[item].host_vulnerabilities }}"
      loop: "{{ groups['dynamic_hosts'] }}"
      when: hostvars[item].host_vulnerabilities is defined

    - name: Depurar all_vulnerability_data
      debug:
        var: all_vulnerability_data

    - name: Generar archivo SQL para inserciones
      copy:
        dest: /tmp/insert_vulnerabilities.sql
        content: |
          {% for vuln in all_vulnerability_data %}
          INSERT INTO vulnerabilidades (detalle, categoria, resultado, ip) VALUES ('{{ vuln.idref | replace("'", "''") }}', '{{ vuln.severity | replace("'", "''") }}', '{{ vuln.result | replace("'", "''") }}', '{{ vuln.ip }}');
          {% endfor %}
      when: all_vulnerability_data | length > 0

    - name: Ejecutar archivo SQL
      command: psql -U grafana_user -d grafana_db -f /tmp/insert_vulnerabilities.sql
      environment:
        PGPASSWORD: "grafana_password"
      when: all_vulnerability_data | length > 0
