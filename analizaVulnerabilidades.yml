---
# playbooks/analizar_vulnerabilidades.yml

- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/inventario.csv"
    grafana_file: "{{ playbook_dir }}/inventory/grafana.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo CSV de inventario existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV de inventario
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV de inventario
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV de inventario
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Verificar que el archivo Grafana CSV existe
      stat:
        path: "{{ grafana_file }}"
      register: grafana_file_check

    - name: Fallar si el archivo Grafana CSV no existe
      fail:
        msg: "El archivo Grafana CSV {{ grafana_file }} no existe."
      when: not grafana_file_check.stat.exists

    - name: Leer contenido del archivo Grafana CSV
      set_fact:
        grafana_csv_content: "{{ lookup('file', grafana_file) }}"

    - name: Extraer encabezados del archivo Grafana CSV
      set_fact:
        grafana_headers: "{{ grafana_csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del archivo Grafana CSV
      set_fact:
        grafana_rows: "{{ grafana_csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila del Grafana CSV tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados en Grafana CSV."
      when: row | length != grafana_headers | length
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas del Grafana CSV para crear diccionarios
      set_fact:
        grafana_csv_data: "{{ grafana_csv_data | default([]) + [ dict(grafana_headers | zip(row)) ] }}"
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
        remote_tmp: /tmp/ansible
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ grafana_csv_data }}"
      loop_control:
        loop_var: item

    # Tareas de depuración para verificar miembros de los grupos
    - name: Listar hosts en 'dynamic_hosts'
      debug:
        msg: "Hosts en dynamic_hosts: {{ groups['dynamic_hosts'] }}"

    - name: Listar hosts en 'grafana_hosts'
      debug:
        msg: "Hosts en grafana_hosts: {{ groups['grafana_hosts'] }}"

- name: Ejecutar análisis de vulnerabilidades con OpenSCAP en dynamic_hosts
  hosts: dynamic_hosts
  gather_facts: yes
  become: yes
  strategy: free  # Permite que los hosts ejecuten tareas independientemente
  tasks:
    - name: Depurar ansible_distribution
      debug:
        var: ansible_distribution

    - name: Verificar si awk está instalado (RHEL/CentOS)
      command: which awk
      register: awk_check_rhel
      ignore_errors: yes
      when: ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]

    - name: Instalar awk si no está instalado (RHEL/CentOS)
      yum:
        name: gawk
        state: present
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - awk_check_rhel.failed

    - name: Verificar si awk está instalado (Ubuntu/Debian)
      command: which awk
      register: awk_check_ubuntu
      ignore_errors: yes
      when: ansible_distribution in ["Ubuntu", "Debian"]

    - name: Instalar awk si no está instalado (Ubuntu/Debian)
      apt:
        name: gawk
        state: present
        update_cache: yes
      when:
        - ansible_distribution in ["Ubuntu", "Debian"]
        - awk_check_ubuntu.failed

    # Ejecutar análisis de vulnerabilidades con OpenSCAP de forma asíncrona
    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP (RHEL/AlmaLinux/RockyLinux)
      command:
        argv:
          - oscap
          - xccdf
          - eval
          - '--profile'
          - 'xccdf_org.ssgproject.content_profile_cis_server_l1'
          - '--results'
          - '/tmp/openscap-results.xml'
          - '--report'
          - '/tmp/openscap-report.html'
          - '/usr/share/xml/scap/ssg/content/ssg-rhel9-ds.xml'
      register: scan_result_rhel
      async: 3600  # Tiempo máximo de ejecución en segundos
      poll: 0      # No esperar a que la tarea termine
      changed_when: false
      failed_when: false
      when: ansible_distribution in ["RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]

    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP (CentOS)
      command:
        argv:
          - oscap
          - xccdf
          - eval
          - '--profile'
          - 'xccdf_org.ssgproject.content_profile_cis_server_l1'
          - '--results'
          - '/tmp/openscap-results.xml'
          - '--report'
          - '/tmp/openscap-report.html'
          - '/usr/share/xml/scap/ssg/content/ssg-cs9-ds.xml'
      register: scan_result_centos
      async: 3600
      poll: 0
      changed_when: false
      failed_when: false
      when: ansible_distribution == "CentOS"

    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP (Ubuntu/Debian)
      command:
        argv:
          - oscap
          - xccdf
          - eval
          - '--profile'
          - 'xccdf_org.ssgproject.content_profile_cis_level2_server'
          - '--results'
          - '/tmp/openscap-results.xml'
          - '--report'
          - '/tmp/openscap-report.html'
          - '/usr/share/xml/scap/ssg/content/ssg-ubuntu2204-ds-1.2.xml'
      register: scan_result_ubuntu
      async: 3600
      poll: 0
      changed_when: false
      failed_when: false
      when: ansible_distribution in ["Ubuntu", "Debian"]

    # Esperar a que terminen las tareas asíncronas
    - name: Esperar a que terminen los análisis de OpenSCAP (RHEL)
      async_status:
        jid: "{{ scan_result_rhel.ansible_job_id }}"
      register: job_result_rhel
      until: job_result_rhel.finished
      retries: 60
      delay: 10
      when: scan_result_rhel.ansible_job_id is defined
      failed_when: false  # Evita que la tarea falle automáticamente

    - name: Esperar a que terminen los análisis de OpenSCAP (CentOS)
      async_status:
        jid: "{{ scan_result_centos.ansible_job_id }}"
      register: job_result_centos
      until: job_result_centos.finished
      retries: 60
      delay: 10
      when: scan_result_centos.ansible_job_id is defined
      failed_when: false  # Evita que la tarea falle automáticamente

    - name: Esperar a que terminen los análisis de OpenSCAP (Ubuntu/Debian)
      async_status:
        jid: "{{ scan_result_ubuntu.ansible_job_id }}"
      register: job_result_ubuntu
      until: job_result_ubuntu.finished
      retries: 60
      delay: 10
      when: scan_result_ubuntu.ansible_job_id is defined
      failed_when: false  # Evita que la tarea falle automáticamente

    # Manejar los resultados de las tareas asíncronas
    - name: Manejar resultado del análisis de OpenSCAP (RHEL)
      set_fact:
        scan_output_rhel: "{{ job_result_rhel }}"
      when:
        - job_result_rhel is defined

    - name: Manejar resultado del análisis de OpenSCAP (CentOS)
      set_fact:
        scan_output_centos: "{{ job_result_centos }}"
      when:
        - job_result_centos is defined

    - name: Manejar resultado del análisis de OpenSCAP (Ubuntu/Debian)
      set_fact:
        scan_output_ubuntu: "{{ job_result_ubuntu }}"
      when:
        - job_result_ubuntu is defined

    # Verificar y procesar los resultados
    - name: Verificar resultados de OpenSCAP (RHEL)
      fail:
        msg: "El análisis de OpenSCAP en {{ inventory_hostname }} para RHEL/CentOS falló."
      when:
        - scan_output_rhel is defined
        - scan_output_rhel.rc is defined
        - scan_output_rhel.rc not in [0, 2]

    - name: Verificar resultados de OpenSCAP (CentOS)
      fail:
        msg: "El análisis de OpenSCAP en {{ inventory_hostname }} para CentOS falló."
      when:
        - scan_output_centos is defined
        - scan_output_centos.rc is defined
        - scan_output_centos.rc not in [0, 2]

    - name: Verificar resultados de OpenSCAP (Ubuntu/Debian)
      fail:
        msg: "El análisis de OpenSCAP en {{ inventory_hostname }} para Ubuntu/Debian falló."
      when:
        - scan_output_ubuntu is defined
        - scan_output_ubuntu.rc is defined
        - scan_output_ubuntu.rc not in [0, 2]

    # Tareas de depuración para verificar el contenido de los resultados
    - name: Depurar scan_output_rhel
      debug:
        var: scan_output_rhel
      when:
        - scan_output_rhel is defined

    - name: Depurar scan_output_centos
      debug:
        var: scan_output_centos
      when:
        - scan_output_centos is defined

    - name: Depurar scan_output_ubuntu
      debug:
        var: scan_output_ubuntu
      when:
        - scan_output_ubuntu is defined

    # Verificar si el archivo de resultados existe (RHEL/CentOS/Ubuntu/Debian)
    - name: Verificar si el archivo de resultados existe (RHEL/CentOS)
      stat:
        path: /tmp/openscap-results.xml
      register: results_file_check_rhel
      when: ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]

    - name: Verificar si el archivo de resultados existe (Ubuntu/Debian)
      stat:
        path: /tmp/openscap-results.xml
      register: results_file_check_ubuntu
      when: ansible_distribution in ["Ubuntu", "Debian"]

    - name: Fallar si el análisis no generó el archivo de resultados (RHEL/CentOS)
      fail:
        msg: "El archivo de resultados de OpenSCAP no se generó en {{ inventory_hostname }}."
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - not results_file_check_rhel.stat.exists

    - name: Fallar si el análisis no generó el archivo de resultados (Ubuntu/Debian)
      fail:
        msg: "El archivo de resultados de OpenSCAP no se generó en {{ inventory_hostname }}."
      when:
        - ansible_distribution in ["Ubuntu", "Debian"]
        - not results_file_check_ubuntu.stat.exists

    - name: Extraer valores del archivo de resultados XML (RHEL/CentOS)
      shell: |
        awk '
          /<rule-result / {
            match($0, /idref="([^"]+)"/, a)
            idref = a[1]
            match($0, /severity="([^"]+)"/, b)
            severity = b[1]
          }
          /<result>/ {
            match($0, /<result>([^<]+)<\/result>/, c)
            result = c[1]
            if (result == "fail" || result == "pass") {
              print idref "," result "," severity
            }
          }
        ' /tmp/openscap-results.xml
      register: xml_vuln_data_rhel
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - results_file_check_rhel.stat.exists

    - name: Extraer valores del archivo de resultados XML (Ubuntu/Debian)
      shell: |
        awk '
          /<rule-result / {
            match($0, /idref="([^"]+)"/, a)
            idref = a[1]
            match($0, /severity="([^"]+)"/, b)
            severity = b[1]
          }
          /<result>/ {
            match($0, /<result>([^<]+)<\/result>/, c)
            result = c[1]
            if (result == "fail" || result == "pass") {
              print idref "," result "," severity
            }
          }
        ' /tmp/openscap-results.xml
      register: xml_vuln_data_ubuntu
      when:
        - ansible_distribution in ["Ubuntu", "Debian"]
        - results_file_check_ubuntu.stat.exists

    - name: Depurar xml_vuln_data_rhel.stdout
      debug:
        var: xml_vuln_data_rhel.stdout
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - xml_vuln_data_rhel.stdout is defined

    - name: Depurar xml_vuln_data_ubuntu.stdout
      debug:
        var: xml_vuln_data_ubuntu.stdout
      when:
        - ansible_distribution in ["Ubuntu", "Debian"]
        - xml_vuln_data_ubuntu.stdout is defined

    - name: Parse vulnerability data (RHEL/CentOS)
      set_fact:
        vulnerability_data_host: "{{ vulnerability_data_host | default([]) + [{'idref': idref, 'result': result, 'severity': severity, 'ip': ansible_host}] }}"
      vars:
        idref: "{{ item.split(',')[0] }}"
        result: "{{ item.split(',')[1] }}"
        severity: "{{ item.split(',')[2] }}"
      loop: "{{ xml_vuln_data_rhel.stdout_lines }}"
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - xml_vuln_data_rhel.stdout

    - name: Parse vulnerability data (Ubuntu/Debian)
      set_fact:
        vulnerability_data_host: "{{ vulnerability_data_host | default([]) + [{'idref': idref, 'result': result, 'severity': severity, 'ip': ansible_host}] }}"
      vars:
        idref: "{{ item.split(',')[0] }}"
        result: "{{ item.split(',')[1] }}"
        severity: "{{ item.split(',')[2] }}"
      loop: "{{ xml_vuln_data_ubuntu.stdout_lines }}"
      when:
        - ansible_distribution in ["Ubuntu", "Debian"]
        - xml_vuln_data_ubuntu.stdout

    - name: Guardar vulnerabilidades en una variable para cada host
      set_fact:
        host_vulnerabilities: "{{ vulnerability_data_host }}"
      when: vulnerability_data_host is defined

    - name: Depurar host_vulnerabilities
      debug:
        var: host_vulnerabilities
      when: host_vulnerabilities is defined

- name: Guardar vulnerabilidades en la base de datos
  hosts: grafana_hosts
  gather_facts: no
  vars:
    vulnerability_user: "grafana_user"
    vulnerability_db: "grafana_db"
    vulnerability_password: "grafana_password"
  tasks:
    - name: Recolectar todos los datos de vulnerabilidades de los dynamic_hosts
      set_fact:
        all_vulnerability_data: "{{ all_vulnerability_data | default([]) + hostvars[item].host_vulnerabilities }}"
      loop: "{{ groups['dynamic_hosts'] }}"
      when: hostvars[item].host_vulnerabilities is defined

    - name: Depurar all_vulnerability_data
      debug:
        var: all_vulnerability_data

    - name: Generar archivo SQL para inserciones
      copy:
        dest: /tmp/insert_vulnerabilities.sql
        content: |
          {% for vuln in all_vulnerability_data %}
          INSERT INTO vulnerabilidades (detalle, categoria, resultado, ip) VALUES ('{{ vuln.idref | replace("'", "''") }}', '{{ vuln.severity | replace("'", "''") }}', '{{ vuln.result | replace("'", "''") }}', '{{ vuln.ip }}');
          {% endfor %}
      when: all_vulnerability_data | length > 0

    - name: Ejecutar archivo SQL
      command: psql -U {{ vulnerability_user }} -d {{ vulnerability_db }} -f /tmp/insert_vulnerabilities.sql
      environment:
        PGPASSWORD: "{{ vulnerability_password }}"
      when: all_vulnerability_data | length > 0
