---
# playbooks/analizar_vulnerabilidades.yml

- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/inventario.csv"
    grafana_file: "{{ playbook_dir }}/inventory/grafana.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Verificar que el archivo Grafana CSV existe
      stat:
        path: "{{ grafana_file }}"
      register: grafana_file_check

    - name: Fallar si el archivo de inventario Grafana no existe
      fail:
        msg: "El archivo de inventario {{ grafana_file }} no existe."
      when: not grafana_file_check.stat.exists

    - name: Leer contenido del archivo Grafana CSV
      set_fact:
        grafana_csv_content: "{{ lookup('file', grafana_file) }}"

    - name: Extraer encabezados del archivo Grafana CSV
      set_fact:
        grafana_headers: "{{ grafana_csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del archivo Grafana CSV
      set_fact:
        grafana_rows: "{{ grafana_csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila del archivo Grafana tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != grafana_headers | length
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas del archivo Grafana para crear diccionarios
      set_fact:
        grafana_csv_data: "{{ grafana_csv_data | default([]) + [ dict(grafana_headers | zip(row)) ] }}"
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
        remote_tmp: /tmp/ansible
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ grafana_csv_data }}"
      loop_control:
        loop_var: item

- name: Ejecutar análisis de vulnerabilidades con OpenSCAP
  hosts: dynamic_hosts
  gather_facts: yes
  become: yes
  tasks:
    # Análisis con OpenSCAP para CentOS/RHEL/AlmaLinux/RockyLinux
    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP (RHEL/AlmaLinux/RockyLinux)
      command:
        argv:
          - oscap
          - xccdf
          - eval
          - '--profile'
          - 'xccdf_org.ssgproject.content_profile_cis_server_l1'
          - '--results'
          - '/tmp/openscap-results.xml'
          - '--report'
          - '/tmp/openscap-report.html'
          - '/usr/share/xml/scap/ssg/content/ssg-rhel9-ds.xml'
      register: scan_result_centos
      changed_when: false
      failed_when: false
      become: yes
      when: ansible_distribution in ["RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]

    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP (CentOS)
      command:
        argv:
          - oscap
          - xccdf
          - eval
          - '--profile'
          - 'xccdf_org.ssgproject.content_profile_cis_server_l1'
          - '--results'
          - '/tmp/openscap-results.xml'
          - '--report'
          - '/tmp/openscap-report.html'
          - '/usr/share/xml/scap/ssg/content/ssg-cs9-ds.xml'
      register: scan_result_centos
      changed_when: false
      failed_when: false
      become: yes
      when: ansible_distribution in ["CentOS"]

    - name: Ejecutar análisis de vulnerabilidades con Ubuntu Debian  (CentOS)
      command:
        argv:
          - oscap
          - xccdf
          - eval
          - '--profile'
          - 'profile xccdf_org.ssgproject.content_profile_cis_level2_server'
          - '--results'
          - '/tmp/openscap-results.xml'
          - '--report'
          - '/tmp/openscap-report.html'
          - '/usr/share/xml/scap/ssg/content/ssg-ubuntu2204-ds-1.2.xml'
      register: scan_result_centos
      changed_when: false
      failed_when: false
      become: yes
      when: ansible_distribution in ["Ubuntu", "Debian"]

    # Verificar si el archivo de resultados existe (CentOS)
    - name: Verificar si el archivo de resultados existe (CentOS)
      stat:
        path: /tmp/openscap-results.xml
      register: results_file_check
      when: ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]

    # Fallar si el análisis no generó el archivo de resultados (CentOS)
    - name: Fallar si el análisis no generó el archivo de resultados (CentOS)
      fail:
        msg: "El archivo de resultados de OpenSCAP no se generó en {{ inventory_hostname }}."
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - not results_file_check.stat.exists

    # Leer el archivo de resultados XML para OpenSCAP (CentOS)
    - name: Leer el archivo de resultados XML (CentOS)
      slurp:
        src: /tmp/openscap-results.xml
      register: slurped_xml
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - results_file_check.stat.exists

    # Leer el archivo de resultados XML para OpenSCAP (Ubuntu/Debian)
    - name: Leer el archivo de resultados XML (Ubuntu/Debian)
      slurp:
        src: /home/ubuntu/result.xml
      register: slurped_xml_ubuntu
      when:
        - ansible_distribution in ["Ubuntu", "Debian"]
        - results_file_check_ubuntu.stat.exists

    # Extraer valores del archivo de resultados XML para todas las distribuciones
    - name: Extraer valores del archivo de resultados XML (todas las distribuciones)
      xml:
        content: "{{ (slurped_xml.content if ansible_distribution in ['CentOS', 'RedHat', 'OracleLinux', 'AlmaLinux', 'RockyLinux'] else slurped_xml_ubuntu.content) | b64decode }}"
        xpath: "/rule-result"
        content_key: "rule_results"
      register: xml_parsed_all
      when: ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux", "Ubuntu", "Debian"]

    - name: Guardar valores de idref, result y severity (todas las distribuciones)
      set_fact:
        vulnerability_data_all: |
          {{ xml_parsed_all.matches | map(attribute='@idref') | list }}
          {{ xml_parsed_all.matches | map(attribute='result') | list }}
          {{ xml_parsed_all.matches | map(attribute='@severity') | list }}
      when: ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux", "Ubuntu", "Debian"]

- name: Guardar vulnerabilidades en la base de datos
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Insertar registros en la tabla vulnerabilidades en la base de datos
      command: >
        psql -U vulnerability_user -d vulnerability_db -c "
        INSERT INTO vulnerabilidades (
          detalle, categoria, resultado, ip
        ) VALUES (
          '{{ item.idref }}',
          '{{ item.severity }}',
          '{{ item.result }}',
          '{{ item.ip }}'
        )
        "
      loop: "{{ xml_parsed_all.matches | map(attribute='@idref', '@severity', 'result') | list }}"
      loop_control:
        loop_var: item
      environment:
        PGPASSWORD: "vulnerability_password"
      become: no
