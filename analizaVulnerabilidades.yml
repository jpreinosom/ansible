---
# playbooks/analizar_vulnerabilidades.yml

- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/inventario.csv"
    grafana_file: "{{ playbook_dir }}/inventory/grafana.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo CSV de inventario existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV de inventario
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV de inventario
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV de inventario
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Verificar que el archivo Grafana CSV existe
      stat:
        path: "{{ grafana_file }}"
      register: grafana_file_check

    - name: Fallar si el archivo Grafana CSV no existe
      fail:
        msg: "El archivo Grafana CSV {{ grafana_file }} no existe."
      when: not grafana_file_check.stat.exists

    - name: Leer contenido del archivo Grafana CSV
      set_fact:
        grafana_csv_content: "{{ lookup('file', grafana_file) }}"

    - name: Extraer encabezados del archivo Grafana CSV
      set_fact:
        grafana_headers: "{{ grafana_csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del archivo Grafana CSV
      set_fact:
        grafana_rows: "{{ grafana_csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila del Grafana CSV tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados en Grafana CSV."
      when: row | length != grafana_headers | length
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas del Grafana CSV para crear diccionarios
      set_fact:
        grafana_csv_data: "{{ grafana_csv_data | default([]) + [ dict(grafana_headers | zip(row)) ] }}"
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
        remote_tmp: /tmp/ansible
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ grafana_csv_data }}"
      loop_control:
        loop_var: item

    # Tareas de depuración para verificar miembros de los grupos
    - name: Listar hosts en 'dynamic_hosts'
      debug:
        msg: "Hosts en dynamic_hosts: {{ groups['dynamic_hosts'] }}"

    - name: Listar hosts en 'grafana_hosts'
      debug:
        msg: "Hosts en grafana_hosts: {{ groups['grafana_hosts'] }}"

- name: Ejecutar análisis de vulnerabilidades con OpenSCAP en dynamic_hosts
  hosts: dynamic_hosts
  gather_facts: yes
  become: yes
  tasks:
    - name: Depurar ansible_distribution
      debug:
        var: ansible_distribution

    - name: Verificar si awk está instalado
      command: which awk
      register: awk_check
      ignore_errors: yes

    - name: Instalar awk si no está instalado (RHEL/CentOS)
      yum:
        name: gawk
        state: present
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - awk_check.rc != 0

    - name: Instalar awk si no está instalado (Ubuntu/Debian)
      apt:
        name: gawk
        state: present
        update_cache: yes
      when:
        - ansible_distribution in ["Ubuntu", "Debian"]
        - awk_check.rc != 0

    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP
      shell: |
        oscap xccdf eval \
        --profile xccdf_org.ssgproject.content_profile_cis_server_l1 \
        --results /tmp/openscap-results.xml \
        --report /tmp/openscap-report.html \
        {{ oscap_content_path }}
      register: scan_result
      changed_when: false
      failed_when: false
      vars:
        oscap_content_path: >
          {% if ansible_distribution in ["RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"] %}
            /usr/share/xml/scap/ssg/content/ssg-rhel9-ds.xml
          {% elif ansible_distribution == "CentOS" %}
            /usr/share/xml/scap/ssg/content/ssg-cs9-ds.xml
          {% elif ansible_distribution in ["Ubuntu", "Debian"] %}
            /usr/share/xml/scap/ssg/content/ssg-ubuntu2204-ds-1.2.xml
          {% else %}
            ''
          {% endif %}
      when: oscap_content_path != ''

    - name: Verificar si el archivo de resultados existe
      stat:
        path: /tmp/openscap-results.xml
      register: results_file_check

    - name: Fallar si el análisis no generó el archivo de resultados
      fail:
        msg: "El archivo de resultados de OpenSCAP no se generó en {{ inventory_hostname }}."
      when: not results_file_check.stat.exists

    - name: Extraer valores del archivo de resultados XML
      shell: |
        awk '
          /<rule-result / {
            match($0, /idref="([^"]+)"/, a)
            idref = a[1]
            match($0, /severity="([^"]+)"/, b)
            severity = b[1]
          }
          /<result>/ {
            match($0, /<result>([^<]+)<\/result>/, c)
            result = c[1]
            if (result == "fail" || result == "pass") {
              print idref "," result "," severity
            }
          }
        ' /tmp/openscap-results.xml > /tmp/vulnerabilities_{{ inventory_hostname }}.csv

    - name: Leer contenido del archivo de vulnerabilidades
      slurp:
        src: /tmp/vulnerabilities_{{ inventory_hostname }}.csv
      register: vuln_file_content

    - name: Enviar datos de vulnerabilidades al grafana_host
      copy:
        content: "{{ vuln_file_content.content | b64decode }}"
        dest: /tmp/vulnerabilities_{{ inventory_hostname }}.csv
      delegate_to: "{{ groups['grafana_hosts'][0] }}"

    - name: Eliminar archivos temporales en dynamic_hosts
      file:
        path:
          - "/tmp/vulnerabilities_{{ inventory_hostname }}.csv"
          - "/tmp/openscap-results.xml"
          - "/tmp/openscap-report.html"
        state: absent

- name: Guardar vulnerabilidades en la base de datos
  hosts: grafana_hosts
  gather_facts: no
  vars:
    vulnerability_user: "grafana_user"
    vulnerability_db: "grafana_db"
    vulnerability_password: "grafana_password"
  tasks:
    - name: Obtener lista de archivos de vulnerabilidades
      find:
        paths: /tmp
        patterns: "vulnerabilities_*.csv"
      register: vulnerability_files

    - name: Verificar que se encontraron archivos de vulnerabilidades
      fail:
        msg: "No se encontraron archivos de vulnerabilidades en /tmp"
      when: vulnerability_files.matched == 0

    - name: Inicializar all_vulnerability_data
      set_fact:
        all_vulnerability_data: []

    - name: Procesar cada archivo de vulnerabilidades
      loop: "{{ vulnerability_files.files }}"
      loop_control:
        loop_var: item
        label: "{{ item.path }}"
      vars:
        ip_address: "{{ item.path.split('_')[-1].replace('.csv', '') }}"
      block:
        - name: Leer contenido del archivo de vulnerabilidades
          slurp:
            src: "{{ item.path }}"
          register: vuln_file_content

        - name: Procesar contenido del archivo y actualizar all_vulnerability_data
          set_fact:
            all_vulnerability_data: "{{ all_vulnerability_data + processed_items }}"
          vars:
            file_content_decoded: "{{ vuln_file_content.content | b64decode }}"
            processed_items: >-
              {{
                file_content_decoded.split('\n')
                | reject('equalto', '')
                | map('split', ',')
                | selectattr('length', 'eq', 3)
                | map('list_to_dict', ['idref', 'result', 'severity'])
                | map('combine', {'ip': ip_address})
                | list
              }}

    - name: Depurar all_vulnerability_data
      debug:
        var: all_vulnerability_data

    - name: Generar archivo SQL para inserciones
      copy:
        dest: /tmp/insert_vulnerabilities.sql
        content: |
          {% for vuln in all_vulnerability_data %}
          INSERT INTO vulnerabilidades (detalle, categoria, resultado, ip) VALUES ('{{ vuln.idref | replace("'", "''") }}', '{{ vuln.severity | replace("'", "''") }}', '{{ vuln.result | replace("'", "''") }}', '{{ vuln.ip }}');
          {% endfor %}
      when: all_vulnerability_data | length > 0

    - name: Ejecutar archivo SQL
      command: psql -U {{ vulnerability_user }} -d {{ vulnerability_db }} -f /tmp/insert_vulnerabilities.sql
      environment:
        PGPASSWORD: "{{ vulnerability_password }}"
      when: all_vulnerability_data | length > 0

    - name: Eliminar archivos temporales en grafana_hosts
      file:
        path:
          - "/tmp/vulnerabilities_*.csv"
          - "/tmp/insert_vulnerabilities.sql"
        state: absent
