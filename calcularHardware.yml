- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/inventario.csv"
    grafana_file: "{{ playbook_dir }}/inventory/grafana.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Verificar que el archivo Grafana CSV existe
      stat:
        path: "{{ grafana_file }}"
      register: grafana_file_check

    - name: Fallar si el archivo de inventario Grafana no existe
      fail:
        msg: "El archivo de inventario {{ grafana_file }} no existe."
      when: not grafana_file_check.stat.exists

    - name: Leer contenido del archivo Grafana CSV
      set_fact:
        grafana_csv_content: "{{ lookup('file', grafana_file) }}"

    - name: Extraer encabezados del archivo Grafana CSV
      set_fact:
        grafana_headers: "{{ grafana_csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del archivo Grafana CSV
      set_fact:
        grafana_rows: "{{ grafana_csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila del archivo Grafana tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != grafana_headers | length
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas del archivo Grafana para crear diccionarios
      set_fact:
        grafana_csv_data: "{{ grafana_csv_data | default([]) + [ dict(grafana_headers | zip(row)) ] }}"
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
        remote_tmp: /tmp/ansible
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ grafana_csv_data }}"
      loop_control:
        loop_var: item

- name: Obtener información de los hosts dinámicos
  hosts: dynamic_hosts
  gather_facts: yes
  tasks:
    - name: Mostrar el total de disco
      debug:
        msg: "El total de disco es: {{ ansible_facts['ansible_facts']['devices']['sda']['size'] | default('No disponible') }}"

    - name: Mostrar el total de RAM
      debug:
        msg: "El total de RAM es: {{ ansible_facts['ansible_facts']['memtotal_mb'] | default('No disponible') }} MB"

    - name: Mostrar el total de procesadores
      debug:
        msg: "El total de procesadores es: {{ ansible_facts['ansible_facts']['processor_count'] | default('No disponible') }}"

- name: Obtener información consolidada de los hosts dinámicos
  hosts: dynamic_hosts
  gather_facts: yes
  tasks:
    - name: Recopilar información de todos los hosts
      set_fact:
        total_disk: "{{ total_disk | default(0) + (ansible_facts['ansible_facts']['devices']['sda']['size'] | default(0)) }}"
        total_ram: "{{ total_ram | default(0) + (ansible_facts['ansible_facts']['memtotal_mb'] | default(0)) }}"
        total_processors: "{{ total_processors | default(0) + (ansible_facts['ansible_facts']['processor_count'] | default(0)) }}"
      run_once: true
      delegate_to: localhost

    - name: Mostrar información consolidada
      debug:
        msg:
          - "Total de disco de todos los hosts: {{ total_disk | human_readable }}"
          - "Total de RAM de todos los hosts: {{ total_ram }} MB"
          - "Total de procesadores de todos los hosts: {{ total_processors }}"

    - name: Insertar información de hardware en la base de datos
      command: >
        psql -U grafana_user -d grafana_db -c "
        INSERT INTO inventario_hardware (
          disco_total, ram_total, procesador_total, ip
        ) VALUES (
          '{{ total_disk | human_readable }}',
          '{{ total_ram }} MB',
          '{{ total_processors }}',
          '{{ inventory_hostname }}'
        )
        "
      environment:
        PGPASSWORD: "grafana_password"
      become: no
      run_once: true
      delegate_to: localhost
