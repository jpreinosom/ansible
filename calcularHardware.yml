---
# playbooks/limpiar_tablas_grafana.yml

- name: Leer y procesar el inventario CSV para Grafana
  hosts: localhost
  gather_facts: no
  vars:
    grafana_file: "{{ playbook_dir }}/inventory/grafana.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo Grafana CSV existe
      stat:
        path: "{{ grafana_file }}"
      register: grafana_file_check

    - name: Fallar si el archivo de inventario Grafana no existe
      fail:
        msg: "El archivo de inventario {{ grafana_file }} no existe."
      when: not grafana_file_check.stat.exists

    - name: Leer contenido del archivo Grafana CSV
      set_fact:
        grafana_csv_content: "{{ lookup('file', grafana_file) }}"

    - name: Extraer encabezados del archivo Grafana CSV
      set_fact:
        grafana_headers: "{{ grafana_csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del archivo Grafana CSV
      set_fact:
        grafana_rows: "{{ grafana_csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila del archivo Grafana tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != grafana_headers | length
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

       - name: Combinar encabezados con filas del archivo Grafana para crear diccionarios
      set_fact:
        grafana_csv_data: "{{ grafana_csv_data | default([]) + [ dict(grafana_headers | zip(row)) ] }}"
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ grafana_csv_data }}"
      loop_control:
        loop_var: item

- name: Consultar la tabla inventario en la base de datos de Grafana
  hosts: grafana_hosts
  gather_facts: no
  vars:
    db_name: "grafana_db"
  tasks:
    - name: Realizar primera consulta SQL para obtener las familias
      command: >
        psql -U grafana_user -d grafana_db -c "SELECT DISTINCT familia FROM inventario"
      register: familias_query_result
      environment:
        PGPASSWORD: "grafana_password"
      become: no

    - name: Mostrar el resultado de la consulta de familias
      debug:
        var: familias_query_result.stdout

    - name: Procesar los resultados de las familias y hacer una consulta para cada familia
      set_fact:
        familias: "{{ familias_query_result.stdout.split('\n')[2:-2] | map('trim') | list }}"

    - name: Realizar una consulta SQL para cada familia y obtener el resto de la información
      block:
        - name: Consultar datos de servidores para la familia {{ item }}
          command: >
            psql -U grafana_user -d grafana_db -c "SELECT ip, distribucion, version, familia, usuario, password FROM inventario WHERE familia = '{{ item }}'"
          register: family_query_result
          environment:
            PGPASSWORD: "grafana_password"
          become: no
          loop: "{{ familias }}"
          loop_control:
            loop_var: item

        - name: Acumular los resultados de las consultas
          set_fact:
            all_inventario_data: "{{ all_inventario_data | default([]) + [ item.results[0].stdout ] }}"

        - name: Parsear los resultados de la consulta y extraer los datos en formato adecuado
          set_fact:
            inventario_data: "{{ all_inventario_data | map('split', '\n') | map('select', 'match', '^[0-9]') | map('map', 'trim') | list }}"

        - name: Mostrar el contenido completo de inventario_data
          debug:
            msg: "{{ inventario_data }}"

        - name: Mostrar los servidores diferenciados por familia
          block:
            - name: Servidores Linux
              debug:
                msg: "Servidor {{ item[0] }} es de familia Linux"
              loop: "{{ inventario_data }}"
              when: "'Linux' in item[3] | lower"  # Normaliza para comparar en minúsculas

            - name: Servidores Windows
              debug:
                msg: "Servidor {{ item[0] }} es de familia Windows"
              loop: "{{ inventario_data }}"
              when: "'Windows' in item[3] | lower"  # Normaliza para comparar en minúsculas
