---
# playbooks/crear_hosts_y_guardar_hardware.yml

- name: Leer y procesar el inventario CSV para Grafana
  hosts: localhost
  gather_facts: no
  vars:
    grafana_file: "{{ playbook_dir }}/inventory/grafana.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo Grafana CSV existe
      stat:
        path: "{{ grafana_file }}"
      register: grafana_file_check

    - name: Fallar si el archivo de inventario Grafana no existe
      fail:
        msg: "El archivo de inventario {{ grafana_file }} no existe."
      when: not grafana_file_check.stat.exists

    - name: Leer contenido del archivo Grafana CSV
      set_fact:
        grafana_csv_content: "{{ lookup('file', grafana_file) }}"

    - name: Extraer encabezados del archivo Grafana CSV
      set_fact:
        grafana_headers: "{{ grafana_csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del archivo Grafana CSV
      set_fact:
        grafana_rows: "{{ grafana_csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila del archivo Grafana tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != grafana_headers | length
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas del archivo Grafana para crear diccionarios
      set_fact:
        grafana_csv_data: "{{ grafana_csv_data | default([]) + [ dict(grafana_headers | zip(row)) ] }}"
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ grafana_csv_data }}"
      loop_control:
        loop_var: item

- name: Crear hosts dinámicos desde la base de datos inventario y recopilar datos de hardware
  hosts: grafana_hosts
  gather_facts: no
  vars:
    db_name: "grafana_db"
    db_user: "grafana_user"
    db_password: "grafana_password"
  tasks:
    - name: Leer registros desde la tabla inventario
      command: >
        psql -U {{ db_user }} -d {{ db_name }} -t -c "SELECT ip, usuario, password, familia FROM inventario;"
      register: query_result
      environment:
        PGPASSWORD: "{{ db_password }}"

    - name: Procesar registros obtenidos
      set_fact:
        inventory_data: "{{ query_result.stdout_lines | select('search', '\S') | map('split', '|') | list }}"

    - name: Crear hosts dinámicamente a partir de la información de la base de datos
      add_host:
        name: "{{ item[0] }}"
        groups: "{{ 'windows_inventory' if item[3] == 'windows' else 'linux_inventory' }}"
        ansible_host: "{{ item[0] }}"
        ansible_user: "{{ item[1] }}"
        ansible_password: "{{ item[2] }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item[2] }}"
        ansible_shell_type: "cmd" if item[3] == 'windows' else "bash"
      loop: "{{ inventory_data }}"
      loop_control:
        loop_var: item

- name: Recopilar información de hardware de los hosts dinámicos
  hosts: linux_inventory,windows_inventory
  gather_facts: yes
  tasks:
    - name: Calcular total de RAM, disco y procesadores (Linux)
      when: ansible_facts['os_family'] == 'Linux'
      set_fact:
        total_ram: "{{ ansible_memory_mb.real.total }}"
        total_disk: "{{ ansible_devices | dict2items | selectattr('value.host', 'defined') | map(attribute='value.size') | map('float') | sum }}"
        total_processors: "{{ ansible_processor_cores * ansible_processor_count }}"

    - name: Insertar datos de hardware en la tabla hardware (Linux)
      when: ansible_facts['os_family'] == 'Linux'
      command: >
        psql -U {{ db_user }} -d {{ db_name }} -c "
        INSERT INTO hardware (ip, total_ram, total_disk, total_processors)
        VALUES ('{{ inventory_hostname }}', '{{ total_ram }}', '{{ total_disk }}', '{{ total_processors }}');
        "
      environment:
        PGPASSWORD: "{{ db_password }}"
      become: no

    - name: Calcular total de RAM, disco y procesadores (Windows)
      when: ansible_facts['os_family'] == 'Windows'
      set_fact:
        total_ram: "{{ ansible_memory_mb.real.total }}"
        total_disk: "{{ ansible_devices | dict2items | selectattr('value.media', 'search', 'fixed') | map(attribute='value.size_mb') | map('float') | sum }}"
        total_processors: "{{ ansible_processor_cores * ansible_processor_count }}"

    - name: Insertar datos de hardware en la tabla hardware (Windows)
      when: ansible_facts['os_family'] == 'Windows'
      command: >
        psql -U {{ db_user }} -d {{ db_name }} -c "
        INSERT INTO hardware (ip, total_ram, total_disk, total_processors)
        VALUES ('{{ inventory_hostname }}', '{{ total_ram }}', '{{ total_disk }}', '{{ total_processors }}');
        "
      environment:
        PGPASSWORD: "{{ db_password }}"
      become: no
