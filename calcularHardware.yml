---
# playbooks/limpiar_tablas_grafana.yml

- name: Leer y procesar el inventario CSV para Grafana
  hosts: localhost
  gather_facts: no
  vars:
    grafana_file: "{{ playbook_dir }}/inventory/grafana.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo Grafana CSV existe
      stat:
        path: "{{ grafana_file }}"
      register: grafana_file_check

    - name: Fallar si el archivo de inventario Grafana no existe
      fail:
        msg: "El archivo de inventario {{ grafana_file }} no existe."
      when: not grafana_file_check.stat.exists

    - name: Leer contenido del archivo Grafana CSV
      set_fact:
        grafana_csv_content: "{{ lookup('file', grafana_file) }}"

    - name: Extraer encabezados del archivo Grafana CSV
      set_fact:
        grafana_headers: "{{ grafana_csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del archivo Grafana CSV
      set_fact:
        grafana_rows: "{{ grafana_csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila del archivo Grafana tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != grafana_headers | length
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas del archivo Grafana para crear diccionarios
      set_fact:
        grafana_csv_data: "{{ grafana_csv_data | default([]) + [ dict(ip=row[0], distribucion=row[1], version=row[2], familia=row[3], usuario=row[4], password=row[5]) ] }}"
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.ip }}"
        groups: grafana_hosts
        ansible_host: "{{ item.ip }}"
        ansible_user: "{{ item.usuario }}"
        ansible_password: "{{ item.password }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.password }}"
      loop: "{{ grafana_csv_data }}"
      loop_control:
        loop_var: item

- name: Consultar la tabla inventario en la base de datos de Grafana
  hosts: grafana_hosts
  gather_facts: no
  vars:
    db_name: "grafana_db"
  tasks:
    - name: Realizar consulta SQL a la tabla inventario
      command: >
        psql -U grafana_user -d grafana_db -c "SELECT ip, distribucion, version, familia, usuario, password FROM inventario"
      register: inventario_query_result
      environment:
         PGPASSWORD: "grafana_password"
      become: no

    - name: Parsear el resultado de la consulta y extraer los datos en formato adecuado
      set_fact:
        inventario_data: "{{ inventario_query_result.stdout.split('\n')[2:-2] | map('split', '|') | map('map', 'trim') }}"
      
    - name: Mostrar los servidores diferenciados por familia
      block:
        - name: Servidores Linux
          debug:
            msg: "Servidor {{ item[0] }} es de familia Linux"
          loop: "{{ inventario_data }}"
          when: "'Linux' in item[3]"

        - name: Servidores Windows
          debug:
            msg: "Servidor {{ item[0] }} es de familia Windows"
          loop: "{{ inventario_data }}"
          when: "'Windows' in item[3]"
