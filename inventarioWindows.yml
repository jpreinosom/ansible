---
# playbooks/analizar_vulnerabilidades_windows.yml

- name: Leer y procesar el inventario CSV para Windows
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/inventario_windows.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'windows_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: windows_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: winrm
        ansible_winrm_transport: basic
        ansible_winrm_server_cert_validation: ignore
        ansible_port: 5985
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

- name: Obtener información y verificar EoL de los servidores Windows
  hosts: windows_hosts
  gather_facts: yes
  vars_files:
    - vars/eol_map_windows.yml
  tasks:
    - name: Obtener la fecha actual del sistema
      set_fact:
        current_date: "{{ ansible_date_time.date | regex_replace('-', '') }}"  # YYYYMMDD

    - name: Determinar la fecha de EoL para la versión de Windows
      set_fact:
        eol_date: "{{ eol_map[ansible_distribution_version] | default(None) }}"

    - name: Establecer el estado de suscripción
      set_fact:
        subscription_status: >-
          {% if eol_date is defined %}
            {% if current_date | int > (eol_date | int) %}
              Deprecado
            {% else %}
              Soportada
            {% endif %}
          {% else %}
            Versión sin fecha establecida de EoL
          {% endif %}

    - name: Mostrar información del sistema operativo
      debug:
        msg: "Sistema Operativo: {{ ansible_distribution }}, Versión: {{ ansible_distribution_version }}"

- name: Insertar registros en la tabla inventario en la base de datos
  hosts: windows_hosts
  tasks:
    - name: Insertar registros desde csv_data en la base de datos
      become: no
      vars:
        psql_command: |
          INSERT INTO inventario (
            ip, distribucion, version, familia, soportada, usuario, password
          ) VALUES (
            '{{ ansible_host }}',
            '{{ ansible_distribution | default('No disponible') }}',
            '{{ ansible_distribution_version | default('No disponible') }}',
            'Windows',
            '{{ subscription_status | default('No definido') | trim }}',
            '{{ ansible_user }}',
            '{{ ansible_password }}'
          )
      community.postgresql.postgresql_query:
        db: grafana_db
        login_user: grafana_user
        login_password: grafana_password
        query: "{{ psql_command }}"
