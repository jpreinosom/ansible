---
# playbooks/instalar_herramientas_seguridad_ubuntu.yml

- name: Leer y procesar el inventario CSV para instalar herramientas de seguridad
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/inventario.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo de inventario existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^#|^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts_seguridad'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts_seguridad
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_become: yes
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Mostrar estructura completa de csv_data
      debug:
        var: csv_data

- name: Instalar y configurar GVM en Ubuntu/Debian
  hosts: dynamic_hosts_seguridad
  become: yes
  vars:
    admin_user: "admin"  # Cambia esto por el nombre de usuario deseado
    admin_password: "password123"  # Cambia esto por una contraseña segura o utiliza Ansible Vault
    gvm_setup_marker: "/var/lib/gvm/.gvm_setup_done"
    gvm_admin_marker: "/var/lib/gvm/.gvm_admin_created"
  tasks:
    - name: Recopilar información del sistema
      setup:
        gather_subset:
          - distribution
      register: os_facts

    - name: Instalar GVM y dependencias en Ubuntu/Debian
      apt:
        name:
          - gvm
          - greenbone-security-assistant
          - gvmd
          - openvas-scanner
        state: present
        update_cache: yes
      when: os_facts.ansible_facts.ansible_distribution in ["Ubuntu", "Debian"]

    - name: Sincronizar NVTs
      command: greenbone-nvt-sync
      when: os_facts.ansible_facts.ansible_distribution in ["Ubuntu", "Debian"]
      args:
        creates: "/var/lib/gvm/.nvt_sync_done"

    - name: Crear marcador de sincronización de NVTs
      file:
        path: "/var/lib/gvm/.nvt_sync_done"
        state: touch
      when: os_facts.ansible_facts.ansible_distribution in ["Ubuntu", "Debian"]

    - name: Crear usuario GVM admin
      command: gvmd --create-user={{ admin_user }} --password={{ admin_password }}
      when:
        - os_facts.ansible_facts.ansible_distribution in ["Ubuntu", "Debian"]
        - not lookup('file', gvm_admin_marker) is defined

    - name: Crear marcador de usuario admin
      file:
        path: "{{ gvm_admin_marker }}"
        state: touch
      when:
        - os_facts.ansible_facts.ansible_distribution in ["Ubuntu", "Debian"]
        - not lookup('file', gvm_admin_marker) is defined

    - name: Iniciar y habilitar gvmd
      service:
        name: gvmd
        state: started
        enabled: yes
      when: os_facts.ansible_facts.ansible_distribution in ["Ubuntu", "Debian"]

    - name: Inicializar la base de datos GVM
      command: gvmd --rebuild
      when: os_facts.ansible_facts.ansible_distribution in ["Ubuntu", "Debian"]

    - name: Iniciar y habilitar Greenbone Security Assistant en Ubuntu/Debian
      service:
        name: gsad
        state: started
        enabled: yes
      when: os_facts.ansible_facts.ansible_distribution in ["Ubuntu", "Debian"]
