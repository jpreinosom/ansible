---
# playbooks/instalar_herramientas_seguridad.yml

- name: Leer y procesar el inventario CSV para instalar herramientas de seguridad
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/inventario.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^#|^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts_seguridad'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts_seguridad
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_become: yes
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Mostrar estructura completa de csv_data
      debug:
        var: csv_data

- name: Instalar OpenVAS según el sistema operativo
  hosts: dynamic_hosts_seguridad
  become: yes
  tasks:
    - name: Recopilar información del sistema
      setup:
        gather_subset:
          - os
      register: os_facts

    - name: Instalar OpenVAS en Ubuntu/Debian
      when: os_facts.ansible_facts.ansible_distribution == "Ubuntu" or os_facts.ansible_facts.ansible_distribution == "Debian"
      apt:
        name:
          - openvas
          - openvas-scanner
          - openvas-manager
          - greenbone-security-assistant
        state: present
        update_cache: yes

    - name: Configurar OpenVAS en Ubuntu/Debian
      when: os_facts.ansible_facts.ansible_distribution == "Ubuntu" or os_facts.ansible_facts.ansible_distribution == "Debian"
      command: greenbone-nvt-sync

    - name: Iniciar OpenVAS en Ubuntu/Debian
      when: os_facts.ansible_facts.ansible_distribution == "Ubuntu" or os_facts.ansible_facts.ansible_distribution == "Debian"
      service:
        name: openvas-scanner
        state: started
        enabled: yes

    - name: Inicializar la base de datos OpenVAS en Ubuntu/Debian
      when: os_facts.ansible_facts.ansible_distribution == "Ubuntu" or os_facts.ansible_facts.ansible_distribution == "Debian"
      command: openvasmd --rebuild

    - name: Iniciar Greenbone Security Assistant en Ubuntu/Debian
      when: os_facts.ansible_facts.ansible_distribution == "Ubuntu" or os_facts.ansible_facts.ansible_distribution == "Debian"
      service:
        name: gsad
        state: started
        enabled: yes

    - name: Instalar OpenVAS en CentOS/RHEL
      when: os_facts.ansible_facts.ansible_distribution == "CentOS" or os_facts.ansible_facts.ansible_distribution == "RedHat"
      yum:
        name:
          - openvas
          - openvas-scanner
          - openvas-manager
          - greenbone-security-assistant
        state: present
        update_cache: yes

    - name: Configurar OpenVAS en CentOS/RHEL
      when: os_facts.ansible_facts.ansible_distribution == "CentOS" or os_facts.ansible_facts.ansible_distribution == "RedHat"
      command: greenbone-nvt-sync

    - name: Iniciar OpenVAS en CentOS/RHEL
      when: os_facts.ansible_facts.ansible_distribution == "CentOS" or os_facts.ansible_facts.ansible_distribution == "RedHat"
      service:
        name: openvas-scanner
        state: started
        enabled: yes

    - name: Inicializar la base de datos OpenVAS en CentOS/RHEL
      when: os_facts.ansible_facts.ansible_distribution == "CentOS" or os_facts.ansible_facts.ansible_distribution == "RedHat"
      command: openvasmd --rebuild

    - name: Iniciar Greenbone Security Assistant en CentOS/RHEL
      when: os_facts.ansible_facts.ansible_distribution == "CentOS" or os_facts.ansible_facts.ansible_distribution == "RedHat"
      service:
        name: gsad
        state: started
        enabled: yes

    - name: Instalar OpenVAS en Windows usando Docker
      when: os_facts.ansible_facts.ansible_distribution == "Windows"
      ansible.windows.win_chocolatey:
        name: docker-desktop
        state: present

    - name: Iniciar el servicio Docker en Windows
      when: os_facts.ansible_facts.ansible_distribution == "Windows"
      ansible.windows.win_service:
        name: docker
        state: started
        start_mode: auto

    - name: Ejecutar contenedor OpenVAS en Windows usando Docker
      when: os_facts.ansible_facts.ansible_distribution == "Windows"
      ansible.windows.win_docker_container:
        name: openvas
        image: greenbone/openvas
        state: started
        exposed_ports:
          - "443"
