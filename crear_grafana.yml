---
# Primer Play: Leer CSV y Agregar Hosts Dinámicamente
- name: Leer CSV y agregar hosts dinámicamente
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/grafana.csv"  # Ruta completa del CSV
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_ssh_pass: "{{ item.Contraseña }}"
        ansible_python_interpreter: /usr/libexec/platform-python
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Mostrar estructura completa de csv_data (Opcional)
      debug:
        var: csv_data

# Segundo Play: Instalar PostgreSQL y Grafana en Hosts Dinámicos
- name: Instalar PostgreSQL y Grafana en hosts dinámicos
  hosts: dynamic_hosts
  become: yes
  collections:
    - community.postgresql
  vars:
    grafana_password: admin
    postgres_password: password  # Contraseña para el usuario de PostgreSQL de Grafana
    grafana_admin_password: admin  # Contraseña de administrador de Grafana
    postgresql_version: "13"  # Cambia según la versión que desees
    postgresql_repo_url: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    postgresql_gpgkey_url: "https://download.postgresql.org/pub/repos/yum/RPM-GPG-KEY-PGDG"
    grafana_repo_gpgkey: "https://packages.grafana.com/gpg.key"
  tasks:
    # Paso 1: Agregar el Repositorio Externo de PostgreSQL
    - name: Descargar el repositorio de PostgreSQL
      get_url:
        url: "{{ postgresql_repo_url }}"
        dest: /tmp/pgdg-redhat-repo-latest.noarch.rpm
      become: yes

    - name: Instalar el repositorio de PostgreSQL
      yum:
        name: /tmp/pgdg-redhat-repo-latest.noarch.rpm
        state: present
      become: yes

    # Paso 2: Importar la Clave GPG de PostgreSQL
    - name: Importar clave GPG de PostgreSQL
      rpm_key:
        key: "{{ postgresql_gpgkey_url }}"
        state: present
      become: yes

    # Paso 3: Deshabilitar el Módulo Predeterminado de PostgreSQL
    - name: Deshabilitar el módulo predeterminado de PostgreSQL
      command: dnf -qy module disable postgresql
      ignore_errors: yes
      become: yes

    # Paso 4: Instalar PostgreSQL
    - name: Instalar PostgreSQL Server
      yum:
        name: "postgresql{{ postgresql_version }}-server"
        state: present
      become: yes

    # Paso 5: Inicializar el Clúster de PostgreSQL
    - name: Inicializar el clúster de base de datos PostgreSQL
      command: "postgresql{{ postgresql_version }}-setup initdb"
      args:
        creates: "/var/lib/pgsql/{{ postgresql_version }}/data/PG_VERSION"
      become: yes

    # Paso 6: Iniciar y Habilitar el Servicio de PostgreSQL
    - name: Iniciar y habilitar el servicio de PostgreSQL
      service:
        name: "postgresql-{{ postgresql_version }}"
        state: started
        enabled: yes
      become: yes

    # Paso 7: Establecer la Contraseña del Usuario 'postgres'
    - name: Establecer la contraseña del usuario 'postgres'
      become_user: postgres
      postgresql_user:
        name: postgres
        password: "{{ postgres_password }}"
        state: present

    # Paso 8: Crear Base de Datos para Grafana
    - name: Crear base de datos para Grafana
      become_user: postgres
      postgresql_db:
        name: grafana
        encoding: UTF-8
        lc_collate: 'en_US.UTF-8'
        lc_ctype: 'en_US.UTF-8'
        state: present

    # Paso 9: Crear Usuario de Base de Datos para Grafana
    - name: Crear usuario de base de datos para Grafana
      become_user: postgres
      postgresql_user:
        name: grafana
        password: "{{ grafana_password }}"
        priv: "grafana:ALL"
        state: present

    # Paso 10: Agregar el Repositorio de Grafana
    - name: Agregar repositorio de Grafana
      yum_repository:
        name: grafana
        description: "Grafana repository"
        baseurl: https://packages.grafana.com/oss/rpm
        repo_gpgcheck: 1
        enabled: 1
        gpgcheck: 1
        gpgkey: "{{ grafana_repo_gpgkey }}"
      notify:
        - Importar clave GPG de Grafana

    # Paso 11: Importar la Clave GPG de Grafana
    - name: Importar clave GPG de Grafana
      rpm_key:
        key: "{{ grafana_repo_gpgkey }}"
        state: present
      become: yes

    # Paso 12: Instalar Grafana
    - name: Instalar Grafana
      yum:
        name: grafana
        state: present
      become: yes

    # Paso 13: Iniciar y Habilitar el Servicio de Grafana
    - name: Iniciar y habilitar el servicio de Grafana
      service:
        name: grafana-server
        state: started
        enabled: yes
      become: yes

    # Paso 14: Configurar la Contraseña de Administrador en Grafana
    - name: Configurar la contraseña de administrador en Grafana
      lineinfile:
        path: /etc/grafana/grafana.ini
        regexp: '^;admin_password ='
        line: "admin_password = {{ grafana_admin_password }}"
      notify:
        - Reiniciar Grafana

    # Paso 15: Configurar Grafana para Usar PostgreSQL como Base de Datos
    - name: Configurar Grafana para usar PostgreSQL como base de datos
      blockinfile:
        path: /etc/grafana/grafana.ini
        block: |
          [database]
          type = postgres
          host = localhost:5432
          name = grafana
          user = grafana
          password = {{ grafana_password }}
          ssl_mode = disable
      notify:
        - Reiniciar Grafana

    # Paso 16: Crear Tabla de Inventario de Servidores en PostgreSQL
    - name: Crear tabla de inventario de servidores en PostgreSQL
      become_user: postgres
      postgresql_query:
        db: grafana
        query: |
          CREATE TABLE IF NOT EXISTS servidores (
            id SERIAL PRIMARY KEY,
            ip VARCHAR(15) NOT NULL,
            distribucion_linux VARCHAR(50) NOT NULL,
            version_linux VARCHAR(20) NOT NULL,
            soportada VARCHAR(50) NOT NULL,
            vulnerabilidad_alta INT DEFAULT 0,
            vulnerabilidad_media INT DEFAULT 0,
            vulnerabilidad_baja INT DEFAULT 0,
            cantidad_procesadores INT DEFAULT 1,
            cantidad_ram INT DEFAULT 0,
            cantidad_disco INT DEFAULT 0
          );

  handlers:
    - name: Reiniciar Grafana
      service:
        name: grafana-server
        state: restarted
      become: yes

    - name: Importar clave GPG de Grafana
      rpm_key:
        key: "{{ grafana_repo_gpgkey }}"
        state: present
      become: yes
