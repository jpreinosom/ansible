- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/grafana.csv"  # Ruta al archivo CSV
    delimiter: ";"  # Delimitador de campos en el CSV
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Mostrar estructura completa de csv_data
      debug:
        var: csv_data

- name: Instalar y configurar Grafana y PostgreSQL en servidores definidos
  hosts: grafana_hosts
  become: yes
  gather_facts: yes

  vars:
    postgres_db: grafana_db
    postgres_user: grafana_user
    postgres_password: "grafana_password"  # Contraseña en texto plano para entorno de pruebas
    postgres_superuser_password: "password"  # Contraseña para el usuario 'postgres'
    grafana_port: 3000
    grafana_ini_path: "/etc/grafana/grafana.ini"

  tasks:
    - name: Instalar PostgreSQL y Grafana usando repositorios por defecto de RHEL
      yum:
        name:
          - postgresql-server
          - postgresql
          - postgresql-contrib
          - grafana
        state: present

    - name: Inicializar la base de datos de PostgreSQL si no está inicializada
      command: /usr/bin/postgresql-setup --initdb
      args:
        creates: /var/lib/pgsql/data/PG_VERSION

    - name: Habilitar y iniciar el servicio de PostgreSQL
      systemd:
        name: postgresql
        enabled: yes
        state: started

    - name: Configurar 'pg_hba.conf' para autenticación 'md5' y 'peer'
      blockinfile:
        path: /var/lib/pgsql/data/pg_hba.conf
        block: |
          # Configuración añadida por Ansible para Grafana
          local   all             postgres                                peer
          host    all             all             127.0.0.1/32            md5
          host    all             all             ::1/128                 md5
      notify: Reiniciar PostgreSQL

    - name: Configurar 'listen_addresses' en 'postgresql.conf'
      lineinfile:
        path: /var/lib/pgsql/data/postgresql.conf
        regexp: '^#?listen_addresses\s*='
        line: "listen_addresses = 'localhost'"
      notify: Reiniciar PostgreSQL

    - name: Reiniciar PostgreSQL para aplicar cambios
      systemd:
        name: postgresql
        state: restarted

    - name: Establecer la contraseña del usuario 'postgres'
      command: "psql -U postgres -d postgres -c \"ALTER USER postgres PASSWORD '{{ postgres_superuser_password }}';\""
      environment:
        PGPASSWORD: ""
      become_user: postgres

    - name: Configurar 'pg_hba.conf' para usar 'md5' con usuario 'postgres'
      lineinfile:
        path: /var/lib/pgsql/data/pg_hba.conf
        regexp: '^local\s+all\s+postgres\s+'
        line: 'local   all             postgres                                md5'
      notify: Reiniciar PostgreSQL

    - name: Reiniciar PostgreSQL después de cambiar autenticación
      systemd:
        name: postgresql
        state: restarted

    - name: Crear usuario de PostgreSQL para Grafana
      command: "psql -U postgres -d postgres -c \"CREATE USER {{ postgres_user }} WITH PASSWORD '{{ postgres_password }}';\""
      environment:
        PGPASSWORD: "{{ postgres_superuser_password }}"
      become_user: postgres
      ignore_errors: yes

    - name: Crear base de datos para Grafana si no existe
      command: "psql -U postgres -d postgres -c \"CREATE DATABASE {{ postgres_db }} WITH OWNER {{ postgres_user }} ENCODING 'UTF8' LC_COLLATE='en_US.UTF-8' LC_CTYPE='en_US.UTF-8' TEMPLATE=template0;\""
      environment:
        PGPASSWORD: "{{ postgres_superuser_password }}"
      become_user: postgres
      ignore_errors: yes

    - name: Otorgar privilegios al usuario de PostgreSQL para Grafana
      command: "psql -U postgres -d postgres -c \"GRANT ALL PRIVILEGES ON DATABASE {{ postgres_db }} TO {{ postgres_user }};\""
      environment:
        PGPASSWORD: "{{ postgres_superuser_password }}"
      become_user: postgres

    - name: Configurar Grafana para usar PostgreSQL - Tipo de Base de Datos
      lineinfile:
        path: "{{ grafana_ini_path }}"
        regexp: '^type\s*='
        line: 'type = postgres'
        insertafter: '^# You can configure the database connection'
      notify: Reiniciar Grafana

    - name: Configurar Grafana para usar PostgreSQL - Host
      lineinfile:
        path: "{{ grafana_ini_path }}"
        regexp: '^host\s*='
        line: 'host = 127.0.0.1:5432'
        insertafter: '^type = postgres'
      notify: Reiniciar Grafana

    - name: Configurar Grafana para usar PostgreSQL - Nombre de la Base de Datos
      lineinfile:
        path: "{{ grafana_ini_path }}"
        regexp: '^name\s*='
        line: "name = {{ postgres_db }}"
        insertafter: '^host = 127.0.0.1:5432'
      notify: Reiniciar Grafana

    - name: Configurar Grafana para usar PostgreSQL - Usuario
      lineinfile:
        path: "{{ grafana_ini_path }}"
        regexp: '^user\s*='
        line: "user = {{ postgres_user }}"
        insertafter: '^name = {{ postgres_db }}'
      notify: Reiniciar Grafana

    - name: Configurar Grafana para usar PostgreSQL - Contraseña
      lineinfile:
        path: "{{ grafana_ini_path }}"
        regexp: '^password\s*='
        line: "password = {{ postgres_password }}"
        insertafter: '^user = {{ postgres_user }}'
      notify: Reiniciar Grafana

    - name: Configurar SELinux para permitir conexiones de Grafana a PostgreSQL
      seboolean:
        name: httpd_can_network_connect_db
        state: yes
        persistent: yes

    - name: Abrir puerto 3000 para Grafana en el firewall
      firewalld:
        port: "{{ grafana_port }}/tcp"
        permanent: yes
        state: enabled
      notify: Recargar Firewall

    - name: Abrir puerto 5432 para PostgreSQL en el firewall
      firewalld:
        port: 5432/tcp
        permanent: yes
        state: enabled
      notify: Recargar Firewall

    - name: Establecer permisos adecuados en directorios de Grafana
      file:
        path: "{{ item }}"
        owner: grafana
        group: grafana
        mode: '0750'
        recurse: yes
      loop:
        - /etc/grafana
        - /var/lib/grafana
        - /var/log/grafana

    - name: Iniciar y habilitar el servicio de Grafana
      systemd:
        name: grafana-server
        enabled: yes
        state: started

  handlers:
    - name: Reiniciar PostgreSQL
      systemd:
        name: postgresql
        state: restarted

    - name: Reiniciar Grafana
      systemd:
        name: grafana-server
        state: restarted

    - name: Recargar Firewall
      command: firewall-cmd --reload
