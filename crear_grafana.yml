---
# Playbook: crear_grafana.yml

- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/grafana.csv"  # Ruta al archivo CSV
    delimiter: ";"  # Delimitador de campos en el CSV
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Mostrar estructura completa de csv_data
      debug:
        var: csv_data

- name: Instalar y configurar Grafana y PostgreSQL en servidores definidos
  hosts: grafana_hosts
  become: yes
  gather_facts: yes  # Asegúrate de que 'gather_facts' esté habilitado
  vars:
    postgres_db: grafana_db
    postgres_user: grafana_user
    postgres_password: "secure_password"  # Contraseña en texto plano para entorno de pruebas
    grafana_port: 3000
  tasks:
    - name: Instalar dependencias para PostgreSQL y Grafana
      dnf:
        name:
          - postgresql-server
          - postgresql-contrib
          - grafana
        state: present

    - name: Inicializar la base de datos de PostgreSQL si no está inicializada
      command: /usr/bin/postgresql-setup --initdb
      args:
        creates: /var/lib/pgsql/data/PG_VERSION

    - name: Iniciar y habilitar el servicio de PostgreSQL
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Iniciar y habilitar el servicio de Grafana
      service:
        name: grafana-server
        state: started
        enabled: yes

    - name: Configurar la autenticación de PostgreSQL para permitir conexiones locales
      lineinfile:
        path: /var/lib/pgsql/data/pg_hba.conf
        regexp: '^local\s+all\s+all\s+peer'
        line: 'local   all             all                                     md5'
        backup: yes
      notify: Reiniciar PostgreSQL

    - name: Crear usuario de PostgreSQL para Grafana
      shell: |
        PGPASSWORD="" psql -U postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='{{ postgres_user }}';" | grep -q 1 || psql -U postgres -c "CREATE USER {{ postgres_user }} WITH PASSWORD '{{ postgres_password }}';"
      args:
        executable: /bin/bash

    - name: Verificar si la base de datos 'grafana_db' existe
      shell: |
        PGPASSWORD="" psql -U postgres -tAc "SELECT 1 FROM pg_database WHERE datname='{{ postgres_db }}';"
      register: db_exists
      args:
        executable: /bin/bash

    - name: Crear base de datos para Grafana si no existe
      shell: |
        PGPASSWORD="" psql -U postgres -c "CREATE DATABASE {{ postgres_db }} OWNER {{ postgres_user }} ENCODING 'UTF8' LC_COLLATE 'en_US.UTF-8' LC_CTYPE 'en_US.UTF-8';"
      when: db_exists.stdout.strip() != "1"
      args:
        executable: /bin/bash

    - name: Configurar Grafana para usar PostgreSQL - Tipo de Base de Datos
      lineinfile:
        path: /etc/grafana/grafana.ini
        regexp: '^;?type\s*='
        line: 'type = postgres'
        section: database
        insertafter: '^# You can configure the database connection'
      notify: Reiniciar Grafana

    - name: Configurar Grafana para usar PostgreSQL - Host
      lineinfile:
        path: /etc/grafana/grafana.ini
        regexp: '^;?host\s*='
        line: 'host = localhost:5432'
        section: database
        insertafter: '^type = postgres'
      notify: Reiniciar Grafana

    - name: Configurar Grafana para usar PostgreSQL - Nombre de la Base de Datos
      lineinfile:
        path: /etc/grafana/grafana.ini
        regexp: '^;?name\s*='
        line: 'name = {{ postgres_db }}'
        section: database
        insertafter: '^host = localhost:5432'
      notify: Reiniciar Grafana

    - name: Configurar Grafana para usar PostgreSQL - Usuario
      lineinfile:
        path: /etc/grafana/grafana.ini
        regexp: '^;?user\s*='
        line: 'user = {{ postgres_user }}'
        section: database
        insertafter: '^name = {{ postgres_db }}'
      notify: Reiniciar Grafana

    - name: Configurar Grafana para usar PostgreSQL - Contraseña
      lineinfile:
        path: /etc/grafana/grafana.ini
        regexp: '^;?password\s*='
        line: 'password = {{ postgres_password }}'
        section: database
        insertafter: '^user = {{ postgres_user }}'
      notify: Reiniciar Grafana

    - name: Crear tabla de inventario en PostgreSQL
      shell: |
        PGPASSWORD="{{ postgres_password }}" psql -U {{ postgres_user }} -d {{ postgres_db }} -c "CREATE TABLE IF NOT EXISTS inventory (
          ip VARCHAR(15) PRIMARY KEY,
          distribucion_linux VARCHAR(50),
          version_linux VARCHAR(20),
          soportado TEXT,
          vulnerabilidades_altas INTEGER,
          vulnerabilidades_medias INTEGER,
          vulnerabilidades_bajas INTEGER,
          cantidad_procesadores INTEGER,
          cantidad_ram INTEGER,
          cantidad_disco_duro INTEGER
        );"
      args:
        executable: /bin/bash

  handlers:
    - name: Reiniciar PostgreSQL
      service:
        name: postgresql
        state: restarted

    - name: Reiniciar Grafana
      service:
        name: grafana-server
        state: restarted
