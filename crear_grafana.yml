---
# Playbook: crear_grafana.yml

- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/grafana.csv"  # Ruta al archivo CSV
    delimiter: ";"  # Delimitador de campos en el CSV
  vars_files:
    # Si tienes variables adicionales, descomenta y ajusta la línea siguiente
    # - vars/eol_map.yml
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.USUARIO }}"
        ansible_password: "{{ item.CONTRASEÑA }}"
        ansible_connection: ssh
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Mostrar estructura completa de csv_data
      debug:
        var: csv_data

- name: Instalar y configurar Grafana y PostgreSQL en servidores definidos
  hosts: grafana_hosts
  become: yes
  vars:
    postgres_db: grafana_db
    postgres_user: grafana_user
    postgres_password: "secure_password"  # **Recomendado:** Usar Ansible Vault para manejar contraseñas
    grafana_port: 3000
  pre_tasks:
    - name: Instalar la colección community.postgresql
      ansible.builtin.command:
        cmd: ansible-galaxy collection install community.postgresql
      register: install_collection
      changed_when: "'community.postgresql' in install_collection.stdout"
      ignore_errors: yes
      tags: install_collection

    - name: Verificar instalación de la colección community.postgresql
      ansible.builtin.command:
        cmd: ansible-galaxy collection list
      register: collection_list
      changed_when: false

    - name: Fallar si la colección community.postgresql no está instalada
      ansible.builtin.fail:
        msg: "La colección community.postgresql no está instalada y no pudo ser instalada automáticamente."
      when: "'community.postgresql' not in collection_list.stdout"
      tags: verify_collection

  tasks:
    - name: Instalar dependencias para PostgreSQL y Grafana
      dnf:
        name:
          - postgresql-server
          - postgresql-contrib
          - grafana
        state: present
      tags: install_packages

    - name: Inicializar la base de datos de PostgreSQL
      command: /usr/bin/postgresql-setup --initdb
      args:
        creates: /var/lib/pgsql/data/PG_VERSION
      when: "'postgresql-server' in ansible_facts.packages"
      tags: init_db

    - name: Iniciar y habilitar el servicio de PostgreSQL
      service:
        name: postgresql
        state: started
        enabled: yes
      tags: start_postgres

    - name: Iniciar y habilitar el servicio de Grafana
      service:
        name: grafana-server
        state: started
        enabled: yes
      tags: start_grafana

    - name: Configurar la autenticación de PostgreSQL para permitir conexiones locales
      lineinfile:
        path: /var/lib/pgsql/data/pg_hba.conf
        regexp: '^local\s+all\s+all\s+peer'
        line: 'local   all             all                                     md5'
        backup: yes
      notify: Reiniciar PostgreSQL
      tags: configure_postgres_auth

    - name: Reiniciar PostgreSQL para aplicar cambios de configuración
      service:
        name: postgresql
        state: restarted
      when: "'local   all             all                                     md5' in lookup('file', '/var/lib/pgsql/data/pg_hba.conf')"
      tags: restart_postgres

    - name: Crear usuario de PostgreSQL para Grafana
      community.postgresql.postgresql_user:
        name: "{{ postgres_user }}"
        password: "{{ postgres_password }}"
        priv: "ALL"
        state: present
      become_user: postgres
      tags: create_pg_user

    - name: Crear base de datos para Grafana
      community.postgresql.postgresql_db:
        name: "{{ postgres_db }}"
        owner: "{{ postgres_user }}"
        encoding: UTF8
        lc_collate: en_US.UTF-8
        lc_ctype: en_US.UTF-8
        state: present
      become_user: postgres
      tags: create_pg_db

    - name: Configurar Grafana para usar PostgreSQL
      blockinfile:
        path: /etc/grafana/grafana.ini
        block: |
          [database]
          type = postgres
          host = localhost:5432
          name = {{ postgres_db }}
          user = {{ postgres_user }}
          password = {{ postgres_password }}
      notify: Reiniciar Grafana
      tags: configure_grafana

    - name: Crear tabla de inventario en PostgreSQL
      community.postgresql.postgresql_query:
        db: "{{ postgres_db }}"
        query: |
          CREATE TABLE IF NOT EXISTS inventory (
            ip VARCHAR(15) PRIMARY KEY,
            distribucion_linux VARCHAR(50),
            version_linux VARCHAR(20),
            soportado TEXT,
            vulnerabilidades_altas INTEGER,
            vulnerabilidades_medias INTEGER,
            vulnerabilidades_bajas INTEGER,
            cantidad_procesadores INTEGER,
            cantidad_ram INTEGER,
            cantidad_disco_duro INTEGER
          );
      become_user: postgres
      tags: create_table

  handlers:
    - name: Reiniciar PostgreSQL
      service:
        name: postgresql
        state: restarted

    - name: Reiniciar Grafana
      service:
        name: grafana-server
        state: restarted
