---
- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/webServer.csv"
    grafana_file: "{{ playbook_dir }}/inventory/grafana.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Verificar que el archivo Grafana CSV existe
      stat:
        path: "{{ grafana_file }}"
      register: grafana_file_check

    - name: Fallar si el archivo de inventario Grafana no existe
      fail:
        msg: "El archivo de inventario {{ grafana_file }} no existe."
      when: not grafana_file_check.stat.exists

    - name: Leer contenido del archivo Grafana CSV
      set_fact:
        grafana_csv_content: "{{ lookup('file', grafana_file) }}"

    - name: Extraer encabezados del archivo Grafana CSV
      set_fact:
        grafana_headers: "{{ grafana_csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del archivo Grafana CSV
      set_fact:
        grafana_rows: "{{ grafana_csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila del archivo Grafana tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != grafana_headers | length
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas del archivo Grafana para crear diccionarios
      set_fact:
        grafana_csv_data: "{{ grafana_csv_data | default([]) + [ dict(grafana_headers | zip(row)) ] }}"
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
        remote_tmp: /tmp/ansible
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ grafana_csv_data }}"
      loop_control:
        loop_var: item
        
- name: Verificar e instalar nuevo certificado SSL si existen archivos previos
  hosts: dynamic_hosts
  vars:
    # Directorio y nombres de archivos en el host remoto
    remote_cert_dir: "/etc/ssl/certs"
    remote_key_dir: "/etc/ssl/certs"
    cert_file_remote: "certificate.crt"
    key_file_remote: "certificate.key"

    # Archivos origen en el host de Ansible (o ruta accesible via una fuente central)
    new_cert_source: "/etc/ssl/certificado/certificate.crt"
    new_key_source: "/etc/ssl/certificado/certificate.key"
  tasks:
    - name: Verificar existencia del certificado remoto
      stat:
        path: "{{ remote_cert_dir }}/{{ cert_file_remote }}"
      register: cert_remote_stat

    - name: Verificar existencia de la clave remota
      stat:
        path: "{{ remote_key_dir }}/{{ key_file_remote }}"
      register: key_remote_stat

    - name: Mostrar estado de certificados remotos
      debug:
        msg: >
          Certificado existe: {{ cert_remote_stat.stat.exists }},
          Clave existe: {{ key_remote_stat.stat.exists }}

    - name: Copiar nuevo certificado si el archivo remoto existe
      copy:
        src: "{{ new_cert_source }}"
        dest: "{{ remote_cert_dir }}/{{ cert_file_remote }}"
        owner: root
        group: root
        mode: '0644'
      when: cert_remote_stat.stat.exists

    - name: Copiar nueva clave si el archivo remoto existe
      copy:
        src: "{{ new_key_source }}"
        dest: "{{ remote_key_dir }}/{{ key_file_remote }}"
        owner: root
        group: root
        mode: '0600'
      when: key_remote_stat.stat.exists

    - name: Mostrar mensaje de omisión si no existen archivos para reemplazar
      debug:
        msg: "No se encontraron archivos de certificado y/o clave para actualizar. Se omite la tarea."
      when: not (cert_remote_stat.stat.exists and key_remote_stat.stat.exists)
