---
- name: Instalar y configurar certificado SSL usando archivos de directorio
  hosts: local
  become: yes
  vars:
    # Directorio donde se encuentran los certificados en el host de Ansible
    cert_directory: "/home/ansible/certificado"
    # Nombres de los archivos (puedes parametrizarlos o iterar si fuera necesario)
    cert_file: "certificado.crt"
    key_file: "llave.key"
    # Rutas completas en el host de Ansible para buscar los certificados
    ssl_cert_source: "{{ cert_directory }}/{{ cert_file }}"
    ssl_key_source: "{{ cert_directory }}/{{ key_file }}"
    # Rutas de destino en el servidor remoto
    ssl_cert_dest: "/etc/ssl/certs/certificate.crt"
    ssl_key_dest: "/etc/ssl/private/certificate.key"
    # Define el servidor web a configurar ('apache' o 'nginx')
  tasks:
    - name: Extraer información del certificado (.crt)
      command: "openssl x509 -in {{ cert_directory }}/{{ key_file }} -noout -fingerprint -subject"
      register: cert_info
      failed_when: cert_info.rc != 0
      changed_when: false

    - name: Mostrar información del certificado
      debug:
      set_fact:
        host: "{{ inventory_hostname }}"
        msg: "Host {{ inventory_hostname }}: {{ cert_info.stdout }}"
        delegate_to: localhost

- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/webServer.csv"
    grafana_file: "{{ playbook_dir }}/inventory/grafana.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Verificar que el archivo Grafana CSV existe
      stat:
        path: "{{ grafana_file }}"
      register: grafana_file_check

    - name: Fallar si el archivo de inventario Grafana no existe
      fail:
        msg: "El archivo de inventario {{ grafana_file }} no existe."
      when: not grafana_file_check.stat.exists

    - name: Leer contenido del archivo Grafana CSV
      set_fact:
        grafana_csv_content: "{{ lookup('file', grafana_file) }}"

    - name: Extraer encabezados del archivo Grafana CSV
      set_fact:
        grafana_headers: "{{ grafana_csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del archivo Grafana CSV
      set_fact:
        grafana_rows: "{{ grafana_csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila del archivo Grafana tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != grafana_headers | length
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas del archivo Grafana para crear diccionarios
      set_fact:
        grafana_csv_data: "{{ grafana_csv_data | default([]) + [ dict(grafana_headers | zip(row)) ] }}"
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
        remote_tmp: /tmp/ansible
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item
      when: ansible_host = host

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ grafana_csv_data }}"
      loop_control:
        loop_var: item
