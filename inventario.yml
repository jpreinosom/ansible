---
- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventario.csv"
    delimiter: ";"
  vars_files:
    - var/eol_map.yml  # Asegúrate de que la ruta sea correcta (var vs. vars)
  tasks:
    - name: Mostrar valor de input_file
      debug:
        var: input_file

    - name: Verificar que el archivo existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Mostrar resultado de la verificación del archivo
      debug:
        var: file_check

    - name: Leer contenido del archivo CSV
      when: file_check.stat.exists
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Mostrar contenido del archivo CSV
      when: file_check.stat.exists
      debug:
        var: csv_content

    - name: Extraer encabezados del CSV
      when: file_check.stat.exists
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Mostrar encabezados
      when: file_check.stat.exists
      debug:
        var: headers

    - name: Extraer filas del CSV
      when: file_check.stat.exists
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Mostrar filas
      when: file_check.stat.exists
      debug:
        var: rows

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      when: file_check.stat.exists
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Inicializar csv_data
      when: file_check.stat.exists
      set_fact:
        csv_data: []

    - name: Combinar encabezados con filas para crear diccionarios
      when: file_check.stat.exists
      set_fact:
        csv_data: "{{ csv_data + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Mostrar estructura completa de csv_data
      when: file_check.stat.exists
      debug:
        var: csv_data

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      when: file_check.stat.exists
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

- name: Obtener información y verificar EoL de los servidores
  hosts: dynamic_hosts
  gather_facts: yes
  vars_files:
    - var/eol_map.yml  # Asegúrate de que la ruta sea correcta (var vs. vars)
  tasks:
    - name: Mostrar distribución y versión de Linux
      debug:
        msg: "Distribución: {{ ansible_distribution }}, Versión: {{ ansible_distribution_version }}"

    - name: Obtener la fecha actual del sistema
      set_fact:
        current_date: "{{ ansible_date_time.iso8601_basic[:8] }}"  # YYYYMMDD

    - name: Determinar la fecha de EoL para la distribución y versión
      set_fact:
        eol_date: >-
          {{
            eol_map[ansible_distribution]
            | default({})
            | dict2items
            | selectattr('key', '==', ansible_distribution_version)
            | map(attribute='value')
            | list
            | first
            | default(None)
          }}

    - name: Mostrar eol_date
      debug:
        var: eol_date

    - name: Verificar si el servidor está EoL
      fail:
        msg: "El servidor {{ inventory_hostname }} está ejecutando {{ ansible_distribution }} {{ ansible_distribution_version }}, que ha alcanzado su End of Life (EoL) el {{ eol_date }}."
      when:
        - eol_date is defined
        - eol_date != "rolling"
        - (current_date | int) > (eol_date | regex_replace('-', '') | int)

    - name: Notificar si la distribución es Rolling Release
      debug:
        msg: "El servidor {{ inventory_hostname }} está ejecutando {{ ansible_distribution }} {{ ansible_distribution_version }}, que es una distribución Rolling Release y no tiene una fecha fija de EoL."
      when:
        - eol_date == "rolling"

    - name: Notificar si la distribución no está mapeada
      debug:
        msg: "La distribución {{ ansible_distribution }} {{ ansible_distribution_version }} no está mapeada para verificar EoL. Se asume que está soportada."
      when:
        - eol_date is not defined

    - name: Establecer el estado de suscripción
      set_fact:
        subscription_status: >-
          {% if eol_date is defined %}
            {% if eol_date == "rolling" %}
              Rolling Release
            {% elif current_date | int > (eol_date | regex_replace('-', '') | int) %}
              EoL
            {% else %}
              Soportada
            {% endif %}
          {% else %}
            Soportada
          {% endif %}

- name: Generar archivo resultado.csv
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Asegurar que el directorio /home/ansible/resultado existe
      file:
        path: /home/ansible/resultado
        state: directory
        mode: '0755'

    - name: Crear archivo resultado.csv
      copy:
        dest: /home/ansible/resultado/resultado.csv
        content: |
          IP;Usuario;Contraseña;Distribucion;Version;Estado_Suscripcion
          {% for entry in hostvars['localhost']['csv_data'] %}
          {{ entry.IP }};{{ entry.Usuario }};{{ entry.Contraseña }};{{ hostvars[entry.IP]['ansible_facts']['distribution'] }};{{ hostvars[entry.IP]['ansible_facts']['distribution_version'] }};{{ hostvars[entry.IP]['subscription_status'] | default('No definido') }}
          {% endfor %}
