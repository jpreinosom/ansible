---
# playbooks/analizar_vulnerabilidades.yml

- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventario.csv"  # Asegúrate de que esta ruta sea correcta
    delimiter: ";"
  vars_files:
    - vars/eol_map.yml  # Asegúrate de que esta ruta sea correcta
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo CSV no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Mostrar estructura completa de csv_data
      debug:
        var: csv_data

- name: Ejecutar análisis de vulnerabilidades con OpenSCAP
  hosts: dynamic_hosts
  gather_facts: yes
  become: yes
  tasks:
    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP (Ubuntu 22.04)
      command: >
        oscap oval eval
        --results /tmp/openscap-results.xml
        /usr/share/xml/scap/ssg/content/ssg-ubuntu2204-ds.xml
      register: scan_result_ubuntu
      changed_when: false
      when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "22.04"

    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP (CentOS/RHEL)
      command: >
        oscap oval eval
        --results /tmp/openscap-results.xml
        /usr/share/xml/scap/ssg/content/ssg-rhel9-ds.xml
      register: scan_result_rhel
      changed_when: false
      when: ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]

    - name: Verificar si el análisis se ejecutó correctamente para Ubuntu
      fail:
        msg: "El análisis de vulnerabilidades con OpenSCAP falló en Ubuntu en {{ inventory_hostname }}"
      when: scan_result_ubuntu.rc != 0
      ignore_errors: yes

    - name: Verificar si el análisis se ejecutó correctamente para CentOS/RHEL
      fail:
        msg: "El análisis de vulnerabilidades con OpenSCAP falló en RHEL/CentOS en {{ inventory_hostname }}"
      when: scan_result_rhel.rc != 0
      ignore_errors: yes

    - name: Leer el archivo de resultados XML
      slurp:
        src: /tmp/openscap-results.xml
      register: slurped_xml

    - name: Decodificar el contenido del archivo XML
      set_fact:
        openscap_results: "{{ slurped_xml.content | b64decode }}"

    - name: Parsear XML y contar vulnerabilidades altas
      set_fact:
        vulnerabilities_high: "{{ (openscap_results | from_xml).oval_results.definitions.definition | selectattr('vuln_severity', 'equalto', 'high') | list | length }}"

    - name: Parsear XML y contar vulnerabilidades medias
      set_fact:
        vulnerabilities_medium: "{{ (openscap_results | from_xml).oval_results.definitions.definition | selectattr('vuln_severity', 'equalto', 'medium') | list | length }}"

    - name: Parsear XML y contar vulnerabilidades bajas
      set_fact:
        vulnerabilities_low: "{{ (openscap_results | from_xml).oval_results.definitions.definition | selectattr('vuln_severity', 'equalto', 'low') | list | length }}"

    - name: Determinar la clasificación de vulnerabilidades
      set_fact:
        vulnerabilities_classification: >-
          {% if vulnerabilities_high > 10 %}
            Alta
          {% elif vulnerabilities_medium > 5 %}
            Media
          {% else %}
            Baja
          {% endif %}

    - name: Mostrar la clasificación de vulnerabilidades
      debug:
        msg: "Clasificación de Vulnerabilidades: {{ vulnerabilities_classification }} (Altas: {{ vulnerabilities_high }}, Medias: {{ vulnerabilities_medium }}, Bajas: {{ vulnerabilities_low }})"

- name: Generar archivo resultado.csv
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Asegurar que el directorio /home/ansible/resultado existe
      file:
        path: /home/ansible/resultado
        state: directory
        mode: '0755'

    - name: Crear archivo resultado.csv
      copy:
        dest: /home/ansible/resultado/resultado.csv
        content: |
          IP;Usuario;Contraseña;Distribucion;Version;Estado_Suscripcion;Clasificacion_Vulnerabilidades;Vulnerabilidades_Altas;Vulnerabilidades_Medias;Vulnerabilidades_Bajas
          {% for entry in hostvars['localhost']['csv_data'] %}
          {{ entry.IP }};{{ entry.Usuario }};{{ entry.Contraseña }};{{ hostvars[entry.IP]['ansible_facts']['distribution'] }};{{ hostvars[entry.IP]['ansible_facts']['distribution_version'] }};{{ hostvars[entry.IP]['subscription_status'] | default('No definido') }};{{ hostvars[entry.IP]['vulnerabilities_classification'] | default('No definido') }};{{ hostvars[entry.IP]['vulnerabilities_high'] | default(0) }};{{ hostvars[entry.IP]['vulnerabilities_medium'] | default(0) }};{{ hostvars[entry.IP]['vulnerabilities_low'] | default(0) }}
          {% endfor %}
...