---
# playbooks/analizar_vulnerabilidades.yml

- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventario.csv"
    delimiter: ";"
  vars_files:
    - vars/eol_map.yml
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Mostrar estructura completa de csv_data
      debug:
        var: csv_data

- name: Ejecutar análisis de vulnerabilidades con OpenSCAP, USG o SUSE Manager
  hosts: dynamic_hosts
  gather_facts: yes
  become: yes
  tasks:
    # Análisis con OpenSCAP para CentOS/RHEL/AlmaLinux/RockyLinux
    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP (RHEL/AlmaLinux/RockyLinux)
      command:
        argv:
          - oscap
          - xccdf
          - eval
          - '--profile'
          - 'xccdf_org.ssgproject.content_profile_cis'
          - '--results'
          - '/tmp/openscap-results.xml'
          - '--report'
          - '/tmp/openscap-report.html'
          - '/usr/share/xml/scap/ssg/content/ssg-rhel9-ds.xml'  # Ajusta el archivo según la versión de tu sistema
      register: scan_result_centos
      changed_when: false
      failed_when: false  # Evita que Ansible marque la tarea como fallida si el comando devuelve un código distinto de cero
      become: yes
      when: ansible_distribution in ["RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
      
    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP (CentOS)
      command:
        argv:
          - oscap
          - xccdf
          - eval
          - '--profile'
          - 'xccdf_org.ssgproject.content_profile_cis'
          - '--results'
          - '/tmp/openscap-results.xml'
          - '--report'
          - '/tmp/openscap-report.html'
          - '/usr/share/xml/scap/ssg/content/ssg-cs9-ds.xml'  # Ajusta el archivo según la versión de tu sistema
      register: scan_result_centos
      changed_when: false
      failed_when: false  # Evita que Ansible marque la tarea como fallida si el comando devuelve un código distinto de cero
      become: yes
      when: ansible_distribution in ["CentOS"]

    # Verificar si el archivo de resultados existe (CentOS)
    - name: Verificar si el archivo de resultados existe (CentOS)
      stat:
        path: /tmp/openscap-results.xml
      register: results_file_check
      when: ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]

    # Fallar si el análisis no generó el archivo de resultados (CentOS)
    - name: Fallar si el análisis no generó el archivo de resultados (CentOS)
      fail:
        msg: "El archivo de resultados de OpenSCAP no se generó en {{ inventory_hostname }}."
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - not results_file_check.stat.exists

    # Leer el archivo de resultados XML para OpenSCAP (CentOS)
    - name: Leer el archivo de resultados XML (CentOS)
      slurp:
        src: /tmp/openscap-results.xml
      register: slurped_xml
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - results_file_check.stat.exists

    # Procesar el contenido del archivo XML para contar vulnerabilidades (CentOS)
    - name: Contar vulnerabilidades de OpenSCAP (CentOS)
      set_fact:
        vulnerabilities_high: "{{ openscap_results | regex_findall('<rule-result.*?severity=\"high\".*?<result>fail</result>') | length }}"
        vulnerabilities_medium: "{{ openscap_results | regex_findall('<rule-result.*?severity=\"medium\".*?<result>fail</result>') | length }}"
        vulnerabilities_low: "{{ openscap_results | regex_findall('<rule-result.*?severity=\"low\".*?<result>fail</result>') | length }}"
      vars:
        openscap_results: "{{ slurped_xml.content | b64decode }}"
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - slurped_xml is defined

    # Mostrar la cantidad de vulnerabilidades altas, medias y bajas (CentOS)
    - name: Mostrar la cantidad de vulnerabilidades altas, medias y bajas (CentOS)
      debug:
        msg: "Vulnerabilidades Altas: {{ vulnerabilities_high }}, Vulnerabilidades Medias: {{ vulnerabilities_medium }}, Vulnerabilidades Bajas: {{ vulnerabilities_low }}"
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - vulnerabilities_high is defined

    # Ejecutar auditoría con USG y generar archivo de resultados (Ubuntu)
    - name: Ejecutar auditoría con USG y generar archivo de resultados (Ubuntu)
      command: >
        usg audit cis_level1_server
        --results-file /tmp/usg_results.xml
      register: usg_audit_result
      changed_when: false
      failed_when: false
      become: yes
      when: ansible_distribution == "Ubuntu"

    # Verificar si el archivo de resultados existe (Ubuntu)
    - name: Verificar si el archivo de resultados existe (Ubuntu)
      stat:
        path: /tmp/usg_results.xml
      register: usg_results_file
      when: ansible_distribution == "Ubuntu"

    # Fallar si el análisis no generó el archivo de resultados (Ubuntu)
    - name: Fallar si el análisis no generó el archivo de resultados (Ubuntu)
      fail:
        msg: "El archivo de resultados de USG no se generó en {{ inventory_hostname }}."
      when:
        - ansible_distribution == "Ubuntu"
        - not usg_results_file.stat.exists

    # Leer el archivo de resultados XML para USG (Ubuntu)
    - name: Leer el archivo de resultados XML (Ubuntu)
      slurp:
        src: /tmp/usg_results.xml
      register: usg_results_xml
      when:
        - ansible_distribution == "Ubuntu"
        - usg_results_file.stat.exists

    # Procesar el contenido del archivo XML para contar vulnerabilidades (Ubuntu)
    - name: Contar vulnerabilidades de USG (Ubuntu)
      set_fact:
        vulnerabilities_high: "{{ usg_results_content | regex_findall('severity=\"high\".*<result>fail</result>') | length }}"
        vulnerabilities_medium: "{{ usg_results_content | regex_findall('severity=\"medium\".*<result>fail</result>') | length }}"
        vulnerabilities_low: "{{ usg_results_content | regex_findall('severity=\"low\".*<result>fail</result>') | length }}"
      vars:
        usg_results_content: "{{ usg_results_xml.content | b64decode }}"
      when:
        - ansible_distribution == "Ubuntu"
        - usg_results_xml is defined

    # Mostrar la cantidad de vulnerabilidades altas, medias y bajas (Ubuntu)
    - name: Mostrar la cantidad de vulnerabilidades altas, medias y bajas (Ubuntu)
      debug:
        msg: "Vulnerabilidades Altas: {{ vulnerabilities_high }}, Vulnerabilidades Medias: {{ vulnerabilities_medium }}, Vulnerabilidades Bajas: {{ vulnerabilities_low }}"
      when:
        - ansible_distribution == "Ubuntu"
        - vulnerabilities_high is defined

    # Análisis con SUSE Manager para SUSE
    - name: Ejecutar análisis de vulnerabilidades con SUSE Manager (SUSE)
      command:
        argv:
          - zypper
          - list-patches
          - '--cve'
      register: scan_result_suse
      changed_when: false
      failed_when: false
      become: yes
      when: ansible_distribution == "SLES"

    # Procesar resultados de SUSE Manager (SUSE)
    - name: Procesar resultados de SUSE Manager (SUSE)
      set_fact:
        vulnerabilities_high: "{{ scan_result_suse.stdout | regex_findall('^.*(Important|Critical).*$', multiline=True) | length }}"
        vulnerabilities_medium: "{{ scan_result_suse.stdout | regex_findall('^.*(Moderate).*$', multiline=True) | length }}"
        vulnerabilities_low: "{{ scan_result_suse.stdout | regex_findall('^.*(Low).*$', multiline=True) | length }}"
      when: ansible_distribution == "SLES"

    # Mostrar la cantidad de vulnerabilidades altas, medias y bajas (SUSE)
    - name: Mostrar la cantidad de vulnerabilidades altas, medias y bajas (SUSE)
      debug:
        msg: "Vulnerabilidades Altas: {{ vulnerabilities_high }}, Vulnerabilidades Medias: {{ vulnerabilities_medium }}, Vulnerabilidades Bajas: {{ vulnerabilities_low }}"
      when:
        - ansible_distribution == "SLES"
        - vulnerabilities_high is defined

- name: Obtener información y verificar EoL de los servidores
  hosts: dynamic_hosts
  gather_facts: yes
  vars_files:
    - vars/eol_map.yml
  tasks:
    - name: Mostrar distribución y versión de Linux
      debug:
        msg: "Distribución: {{ ansible_distribution }}, Versión: {{ ansible_distribution_version }}"

    - name: Obtener la fecha actual del sistema
      set_fact:
        current_date: "{{ ansible_date_time.date | regex_replace('-', '') }}"  # YYYYMMDD

    - name: Determinar la fecha de EoL para la distribución y versión
      set_fact:
        eol_date: >-
          {{
            (eol_map[ansible_distribution]
            | default({})
            | dict2items
            | selectattr('key', '==', ansible_distribution_version)
            | map(attribute='value')
            | list
            | first)
            | default(
              (eol_map[ansible_distribution]
              | default({})
              | dict2items
              | selectattr('key', '==', ansible_distribution_version.split('.')[0])
              | map(attribute='value')
              | list
              | first),
              None
            )
          }}

    - name: Mostrar eol_date
      debug:
        var: eol_date

    - name: Establecer el estado de suscripción
      set_fact:
        subscription_status: >-
          {% if eol_date is defined %}
            {% if eol_date == "rolling" %}
              Rolling Release
            {% elif current_date | int > (eol_date | regex_replace('-', '') | int) %}
              Deprecado
            {% else %}
              Soportada
            {% endif %}
          {% else %}
            Versión sin fecha establecida de EoL
          {% endif %}

    - name: Mostrar subscription_status
      debug:
        var: subscription_status

    - name: Obtener el número de procesadores
      set_fact:
        num_processors: "{{ ansible_processor_vcpus }}"

    - name: Obtener la cantidad de memoria RAM
      set_fact:
        total_ram: "{{ ansible_memtotal_mb }}"

    - name: Obtener el espacio en disco
      set_fact:
        total_disk: "{{ ansible_mounts[0].size_total | int / 1024 / 1024 }} MB"  # En MB

    - name: Mostrar la información de hardware
      debug:
        msg: "Número de procesadores: {{ num_processors }}, RAM total: {{ total_ram }} MB, Espacio en disco: {{ total_disk }}"

- name: Generar archivo resultado.csv
  hosts: local
  gather_facts: no
  tasks:
    - name: Asegurar que el directorio /home/ansible/resultado existe
      file:
        path: /home/ansible/resultado
        state: directory
        mode: '0755'

    - name: Crear archivo resultado.csv
      copy:
        dest: /home/ansible/resultado/resultado.csv
        content: |
          IP;Usuario;Contraseña;Distribucion;Version;Estado_Suscripcion;Vulnerabilidades_Altas;Vulnerabilidades_Medias;Vulnerabilidades_Bajas;Procesadores;RAM_MB;Espacio_Disponible_MB
          {% for entry in hostvars['localhost']['csv_data'] %}
          {{ entry.IP }};{{ entry.Usuario }};{{ entry.Contraseña }};{{ hostvars[entry.IP]['ansible_distribution'] | default('No disponible') }};{{ hostvars[entry.IP]['ansible_distribution_version'] | default('No disponible') }};{{ hostvars[entry.IP]['subscription_status'] | default('No definido') | trim }};{{ hostvars[entry.IP]['vulnerabilities_high'] | default(0) }};{{ hostvars[entry.IP]['vulnerabilities_medium'] | default(0) }};{{ hostvars[entry.IP]['vulnerabilities_low'] | default(0) }};{{ hostvars[entry.IP]['num_processors'] | default('No disponible') }};{{ hostvars[entry.IP]['total_ram'] | default('No disponible') }};{{ hostvars[entry.IP]['total_disk'] | default('No disponible') }}
          {% endfor %}
