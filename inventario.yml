---
- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventario.csv"
    delimiter: ";"
  vars_files:
    - vars/eol_map.yml  # Asegúrate de que esta ruta sea correcta
  tasks:
    - name: Verificar que el archivo existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Mostrar estructura completa de csv_data
      debug:
        var: csv_data

- name: Obtener información y verificar EoL de los servidores
  hosts: dynamic_hosts
  gather_facts: yes
  vars_files:
    - vars/eol_map.yml
  tasks:
    - name: Mostrar distribución y versión de Linux
      debug:
        msg: "Distribución: {{ ansible_distribution }}, Versión: {{ ansible_distribution_version }}"

    - name: Obtener la fecha actual del sistema
      set_fact:
        current_date: "{{ ansible_date_time.iso8601_basic[:8] }}"  # YYYYMMDD

    - name: Determinar la fecha de EoL para la distribución y versión
      set_fact:
        eol_date: >-
          {{
            (eol_map[ansible_distribution]
            | default({})
            | dict2items
            | selectattr('key', '==', ansible_distribution_version)
            | map(attribute='value')
            | list
            | first)
            | default(
              (eol_map[ansible_distribution]
              | default({})
              | dict2items
              | selectattr('key', '==', ansible_distribution_version.split('.')[0])
              | map(attribute='value')
              | list
              | first),
              None
            )
          }}

    - name: Mostrar eol_date
      debug:
        var: eol_date

    - name: Establecer el estado de suscripción
      set_fact:
        subscription_status: >-
          {% if eol_date is defined %}
            {% if eol_date == "rolling" %}
              Rolling Release
            {% elif current_date | int > (eol_date | regex_replace('-', '') | int) %}
              Deprecado
            {% else %}
              Soportada
            {% endif %}
          {% else %}
            version sin fecha establecida de EOL
          {% endif %}

    - name: Mostrar subscription_status
      debug:
        var: subscription_status

- name: Generar archivo resultado.csv
  hosts: local
  gather_facts: no
  tasks:
    - name: Asegurar que el directorio /home/ansible/resultado existe
      file:
        path: /home/ansible/resultado
        state: directory
        mode: '0755'

    - name: Crear archivo resultado.csv
      copy:
        dest: /home/ansible/resultado/resultado.csv
        content: |
          IP;Usuario;Contraseña;Distribucion;Version;Estado_Suscripcion
          {% for entry in hostvars['localhost']['csv_data'] %}
          {{ entry.IP }};{{ entry.Usuario }};{{ entry.Contraseña }};{{ hostvars[entry.IP]['ansible_facts']['distribution'] }};{{ hostvars[entry.IP]['ansible_facts']['distribution_version'] }};{{ hostvars[entry.IP]['subscription_status'] | default('No definido') }}
          {% endfor %}