---
# playbooks/clasificar_eol_y_vulnerabilidades.yml

- name: Leer y procesar el inventario CSV para clasificar EoL y vulnerabilidades
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/inventario.csv"
    delimiter: ";"
  vars_files:
    - vars/eol_map.yml  # Ruta relativa al playbook
  tasks:
    - name: Verificar que el archivo existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^#|^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts_eol_vuln'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts_eol_vuln
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Mostrar estructura completa de csv_data
      debug:
        var: csv_data

- name: Clasificar EoL y ejecutar análisis de vulnerabilidades en los hosts dinámicos
  hosts: dynamic_hosts_eol_vuln
  gather_facts: yes
  become: yes  # Se asume que el usuario tiene privilegios sudo sin contraseña
  vars_files:
    - ../vars/eol_map.yml
  tasks:
    - name: Depurar la distribución del sistema
      debug:
        msg: "Distribución detectada: {{ ansible_distribution }}"

    - name: Encontrar el archivo XML de SCAP Security Guide en Ubuntu/Debian
      find:
        paths: /usr/share/xml/scap/ssg/content/
        patterns: "ssg-ubuntu-*-ds.xml"
        file_type: file
      register: xml_files
      when: ansible_distribution in ["Ubuntu", "Debian"]

    - name: Establecer la ruta del archivo XML de SCAP Security Guide para Ubuntu/Debian
      set_fact:
        ssg_xml_path: "{{ xml_files.files[0].path }}"
      when:
        - ansible_distribution in ["Ubuntu", "Debian"]
        - xml_files.matched > 0

    - name: Fallar si no se encontró el archivo XML en Ubuntu/Debian
      fail:
        msg: "No se encontró el archivo XML de SCAP Security Guide para Ubuntu/Debian en {{ inventory_hostname }}"
      when:
        - ansible_distribution in ["Ubuntu", "Debian"]
        - xml_files.matched == 0

    - name: Encontrar el archivo XML de SCAP Security Guide en CentOS/RHEL
      find:
        paths: /usr/share/xml/scap/ssg/content/
        patterns: "ssg-redhat-ds.xml"
        file_type: file
      register: xml_files_rh
      when: ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]

    - name: Establecer la ruta del archivo XML de SCAP Security Guide para CentOS/RHEL
      set_fact:
        ssg_xml_path: "{{ xml_files_rh.files[0].path }}"
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - xml_files_rh.matched > 0

    - name: Fallar si no se encontró el archivo XML en CentOS/RHEL
      fail:
        msg: "No se encontró el archivo XML de SCAP Security Guide para CentOS/RHEL en {{ inventory_hostname }}"
      when:
        - ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]
        - xml_files_rh.matched == 0

    - name: Ejecutar análisis de vulnerabilidades con OpenSCAP
      command: >
        oscap oval eval
        --results /tmp/openscap-results.xml
        {{ ssg_xml_path }}
      register: scan_result
      changed_when: false

    - name: Verificar si el análisis se ejecutó correctamente
      fail:
        msg: "El análisis de vulnerabilidades con OpenSCAP falló en {{ inventory_hostname }}"
      when: scan_result.rc != 0

    - name: Leer el archivo de resultados XML
      slurp:
        src: /tmp/openscap-results.xml
      register: slurped_xml

    - name: Decodificar el contenido del archivo XML
      set_fact:
        openscap_results: "{{ slurped_xml.content | b64decode }}"

    - name: Parsear XML y contar vulnerabilidades altas
      set_fact:
        vulnerabilities_high: "{{ (openscap_results | from_xml).oval_results.definitions.definition | selectattr('vuln_severity', 'equalto', 'high') | list | length }}"

    - name: Parsear XML y contar vulnerabilidades medias
      set_fact:
        vulnerabilities_medium: "{{ (openscap_results | from_xml).oval_results.definitions.definition | selectattr('vuln_severity', 'equalto', 'medium') | list | length }}"

    - name: Parsear XML y contar vulnerabilidades bajas
      set_fact:
        vulnerabilities_low: "{{ (openscap_results | from_xml).oval_results.definitions.definition | selectattr('vuln_severity', 'equalto', 'low') | list | length }}"

    - name: Determinar la clasificación de vulnerabilidades
      set_fact:
        vulnerabilities_classification: >-
          {% if vulnerabilities_high > 10 %}
            Alta
          {% elif vulnerabilities_medium > 5 %}
            Media
          {% else %}
            Baja
          {% endif %}

    - name: Mostrar la clasificación de vulnerabilidades
      debug:
        msg: "Clasificación de Vulnerabilidades: {{ vulnerabilities_classification }} (Altas: {{ vulnerabilities_high }}, Medias: {{ vulnerabilities_medium }}, Bajas: {{ vulnerabilities_low }})"

    - name: Obtener la fecha actual del sistema
      set_fact:
        current_date: "{{ ansible_date_time.iso8601_basic[:8] }}"  # YYYYMMDD

    - name: Determinar la fecha de EoL para la distribución y versión
      set_fact:
        eol_date: >-
          {{
            (eol_map[ansible_distribution]
            | default({})
            | dict2items
            | selectattr('key', '==', ansible_distribution_version)
            | map(attribute='value')
            | list
            | first)
            | default(
              (eol_map[ansible_distribution]
              | default({})
              | dict2items
              | selectattr('key', '==', ansible_distribution_version.split('.')[0])
              | map(attribute='value')
              | list
              | first),
              None
            )
          }}

    - name: Mostrar eol_date
      debug:
        var: eol_date

    - name: Establecer el estado de suscripción
      set_fact:
        subscription_status: >-
          {% if eol_date is defined %}
            {% if eol_date == "rolling" %}
              Rolling Release
            {% elif current_date | int > (eol_date | regex_replace('-', '') | int) %}
              Deprecado
            {% else %}
              Soportada
            {% endif %}
          {% else %}
            versión sin fecha establecida de EOL
          {% endif %}

    - name: Mostrar subscription_status
      debug:
        var: subscription_status

    # Opcional: Limpiar archivos temporales
    - name: Limpiar archivos temporales de OpenSCAP
      file:
        path: /tmp/openscap-results.xml
        state: absent
      when: ansible_os_family in ["Debian", "RedHat"]
