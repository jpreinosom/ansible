---
# playbooks/instalar_scap_security_guide.yml

- name: Leer y procesar el inventario CSV para agregar hosts dinámicamente
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventario.csv"  # Asegúrate de que esta ruta sea correcta
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo CSV no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      command: cat "{{ input_file }}"
      register: csv_content

    - name: Dividir contenido en líneas
      set_fact:
        csv_lines: "{{ csv_content.stdout.split('\n') }}"

    - name: Extraer encabezados
      set_fact:
        csv_headers: "{{ csv_lines[0].split(delimiter) | map('trim') | list }}"

    - name: Crear lista de hosts
      set_fact:
        csv_hosts: "{{ csv_hosts | default([]) + [ dict(csv_headers[0:3] | zip(line.split(delimiter)[0:3])) ] }}"
      with_items: "{{ csv_lines[1:] }}"
      when: line.strip() != ''
      loop_control:
        loop_var: line
      vars:
        line: "{{ item }}"

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: "dynamic_hosts"
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      with_items: "{{ csv_hosts }}"
      loop_control:
        label: "{{ item.IP }}"
      delegate_to: localhost

- name: Agrupar hosts por distribución
  hosts: dynamic_hosts
  gather_facts: yes
  tasks:
    - name: Agrupar en 'ubuntu_hosts' si Ubuntu
      group_by:
        key: "ubuntu_hosts"
      when: ansible_distribution == "Ubuntu"

    - name: Agrupar en 'rhel_hosts' si RHEL/CentOS
      group_by:
        key: "rhel_hosts"
      when: ansible_distribution in ["CentOS", "RedHat", "OracleLinux", "AlmaLinux", "RockyLinux"]

    - name: Verificar agrupación de hosts
      debug:
        msg: >
          Grupo 'ubuntu_hosts' contiene: {{ groups['ubuntu_hosts'] }}
          Grupo 'rhel_hosts' contiene: {{ groups['rhel_hosts'] }}
      run_once: true

- name: Instalar SCAP Security Guide y dependencias en Ubuntu
  hosts: ubuntu_hosts
  gather_facts: yes
  become: yes
  tasks:
    - name: Habilitar repositorios universe
      apt_repository:
        repo: "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }} universe"
        state: present

    - name: Actualizar la lista de paquetes
      apt:
        update_cache: yes

    - name: Instalar ssg-base, openscap-scanner y git
      apt:
        name:
          - ssg-base
          - openscap-scanner
          - git
          - xsltproc  # Asegúrate de que xsltproc está instalado
        state: present

    - name: Verificar la instalación de git
      command: which git
      register: git_installed
      ignore_errors: yes

    - name: Asegurarse de que git está instalado
      fail:
        msg: "git no se pudo instalar en {{ inventory_hostname }}"
      when: git_installed.rc != 0

    - name: Descargar SCAP Security Guide
      git:
        repo: https://github.com/ComplianceAsCode/content.git
        dest: /tmp/content
        version: master
      when: ansible_distribution == "Ubuntu"

    - name: Verificar que el repositorio se clonó correctamente
      stat:
        path: /tmp/content/.git
      register: git_repo_check
      when: ansible_distribution == "Ubuntu"

    - name: Fallar si el repositorio no se clonó
      fail:
        msg: "El repositorio de SCAP Security Guide no se clonó correctamente en {{ inventory_hostname }}"
      when: ansible_distribution == "Ubuntu" and not git_repo_check.stat.exists

    - name: Compilar el contenido SCAP (Ubuntu)
      command: make -j4
      args:
        chdir: /tmp/content/build
      register: compile_ssg
      when: ansible_distribution == "Ubuntu" and git_repo_check.stat.exists

    - name: Verificar que la compilación se ejecutó correctamente
      fail:
        msg: "La compilación de SCAP Security Guide falló en {{ inventory_hostname }}"
      when: compile_ssg.rc != 0

    - name: Copiar archivos XML de SCAP Security Guide para Ubuntu
      copy:
        src: "/tmp/content/build/content/ssg-ubuntu-{{ ansible_distribution_version.split('.')[0] }}.04-ds.xml"  # Ajusta según la versión
        dest: /usr/share/xml/scap/ssg/content/
        owner: root
        group: root
        mode: '0644'
      when: ansible_distribution == "Ubuntu"

    - name: Verificar la copia de archivos XML
      stat:
        path: "/usr/share/xml/scap/ssg/content/ssg-ubuntu-{{ ansible_distribution_version.split('.')[0] }}.04-ds.xml"
      register: xml_file_check

    - name: Fallar si el archivo XML no se copió correctamente
      fail:
        msg: "No se pudo copiar el archivo XML de SCAP Security Guide para Ubuntu en {{ inventory_hostname }}"
      when: not xml_file_check.stat.exists

- name: Instalar SCAP Security Guide y dependencias en CentOS/RHEL
  hosts: rhel_hosts
  gather_facts: yes
  become: yes
  tasks:
    - name: Instalar openscap-scanner y scap-security-guide
      dnf:
        name:
          - openscap-scanner
          - scap-security-guide
        state: present

    - name: Verificar la instalación de oscap
      command: which oscap
      register: scap_installed
      ignore_errors: yes

    - name: Asegurarse de que oscap está instalado
      fail:
        msg: "oscap no se pudo instalar en {{ inventory_hostname }}"
      when: scap_installed.rc != 0
