---
# playbooks/revisaWebServer.yml

- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/webServer.csv"
    grafana_file: "{{ playbook_dir }}/inventory/grafana.csv"
    delimiter: ";"
  tasks:
    # (Todo el bloque de procesamiento de CSV permanece igual)

- name: Obtener información y verificar EoL de los servidores
  hosts: dynamic_hosts
  gather_facts: yes
  vars:
    cert_check_port: 443
    alert_days: 400
  tasks:
    - name: Determinar la familia del sistema operativo
      set_fact:
        os_family: "Linux"

    - name: Mostrar información del sistema 
      debug:
        msg: "Distribución: {{ ansible_distribution }}, Versión: {{ ansible_distribution_version }}"

    - name: Verificar si NGINX está instalado
      command: which nginx
      register: nginx_installed
      ignore_errors: true

    - name: Verificar si Apache está instalado
      command: which apache2
      register: apache2_installed
      ignore_errors: true

    - name: Verificar si Apache (httpd) está instalado
      command: which httpd
      register: httpd_installed
      ignore_errors: true

    - name: Determinar el servidor web instalado
      set_fact:
        web_server: >-
          {% if nginx_installed.rc == 0 %}
            NGINX
          {% elif apache2_installed.rc == 0 %}
            Apache2
          {% elif httpd_installed.rc == 0 %}
            Apache (httpd)
          {% else %}
            No identificado
          {% endif %}

    - name: Mostrar el servidor web detectado
      debug:
        msg: "Servidor web instalado: {{ web_server }}"

    - name: "Obtener el certificado SSL desde el puerto {{ cert_check_port }}"
      shell: |
        echo | openssl s_client -servername {{ inventory_hostname }} \
                              -connect {{ inventory_hostname }}:{{ cert_check_port }} 2>/dev/null \
          | openssl x509 -noout -dates
      register: ssl_cert_info
      changed_when: false
      ignore_errors: true  # Para que no falle si algún servidor no responde o no tiene SSL

    - name: "Examinar si se obtuvo el certificado"
      fail:
        msg: "No se pudo obtener el certificado SSL desde {{ inventory_hostname }} en el puerto {{ cert_check_port }}."
      when: ssl_cert_info.stdout is not regex("notBefore=|notAfter=")

    - name: "Extraer la fecha de expiración (notAfter)"
      set_fact:
        ssl_cert_expiration_raw: "{{ (ssl_cert_info.stdout | regex_search('notAfter=(.*)', '\\1')) | first | trim }}"
      when: ssl_cert_info.stdout is not none

    - name: "Verificar el valor de ssl_cert_expiration_raw"
      debug:
        var: ssl_cert_expiration_raw
      when: ssl_cert_expiration_raw is defined

    - name: "Limpiar ssl_cert_expiration_raw"
      set_fact:
        ssl_cert_expiration_clean: "{{ ssl_cert_expiration_raw | regex_replace('\\s+', ' ') | trim }}"
      when: ssl_cert_expiration_raw is defined

    - name: "Convertir fecha de expiración a timestamp"
      shell: "date -d '{{ ssl_cert_expiration_clean }}' +%s"
      register: ssl_cert_expiration_ts
      when: ssl_cert_expiration_clean is defined

    - name: "Obtener la fecha actual como timestamp"
      shell: "date -u +%s"
      register: current_time_ts
      when: ssl_cert_expiration_clean is defined

    - name: "Calcular días restantes para vencimiento"
      set_fact:
        days_left: "{{ ((ssl_cert_expiration_ts.stdout | int) - (current_time_ts.stdout | int)) / 86400 | int }}"
      when: ssl_cert_expiration_ts.stdout is defined and current_time_ts.stdout is defined

    - name: "Mostrar resultado en pantalla (debug)"
      debug:
        msg: "El certificado de {{ inventory_hostname }} vence en {{ days_left }} días (Expira el: {{ ssl_cert_expiration_clean }})."
      when: days_left is defined

    # Nueva tarea para compartir la variable days_left con la máquina local
    - name: Establecer days_left en la máquina local
      set_fact:
        days_left: "{{ days_left }}"
      delegate_to: local

- name: Enviar correo de notificación si el certificado vence en menos de 90 días
  hosts: local
  become: yes
  tasks:
    - name: Copiar script Python al host
      copy:
        src: python/send_email.py  # Ruta local del script Python
        dest: /tmp/send_email.py    # Ruta de destino en el host
        mode: '0755'

    - name: Ejecutar el script Python para enviar correo si el certificado vence en menos de 90 días
      command: python3 /tmp/send_email.py
      when: days_left <= alert_days
