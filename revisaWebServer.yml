---
# playbooks/revisaWebServer.yml

- name: Leer y procesar el inventario CSV
  hosts: localhost
  gather_facts: no
  vars:
    input_file: "{{ playbook_dir }}/inventory/webServer.csv"
    grafana_file: "{{ playbook_dir }}/inventory/grafana.csv"
    delimiter: ";"
  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados del CSV
      set_fact:
        headers: "{{ csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del CSV
      set_fact:
        rows: "{{ csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != headers | length
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas para crear diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ rows }}"
      loop_control:
        loop_var: row

    - name: Verificar que el archivo Grafana CSV existe
      stat:
        path: "{{ grafana_file }}"
      register: grafana_file_check

    - name: Fallar si el archivo de inventario Grafana no existe
      fail:
        msg: "El archivo de inventario {{ grafana_file }} no existe."
      when: not grafana_file_check.stat.exists

    - name: Leer contenido del archivo Grafana CSV
      set_fact:
        grafana_csv_content: "{{ lookup('file', grafana_file) }}"

    - name: Extraer encabezados del archivo Grafana CSV
      set_fact:
        grafana_headers: "{{ grafana_csv_content.split('\n') | first | split(delimiter) | map('trim') | list }}"

    - name: Extraer filas del archivo Grafana CSV
      set_fact:
        grafana_rows: "{{ grafana_csv_content.split('\n')[1:] | reject('match', '^$') | list | map('split', delimiter) | list }}"

    - name: Validar que cada fila del archivo Grafana tenga el mismo número de campos que los encabezados
      fail:
        msg: "La fila {{ row }} no tiene el mismo número de campos que los encabezados."
      when: row | length != grafana_headers | length
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados con filas del archivo Grafana para crear diccionarios
      set_fact:
        grafana_csv_data: "{{ grafana_csv_data | default([]) + [ dict(grafana_headers | zip(row)) ] }}"
      loop: "{{ grafana_rows }}"
      loop_control:
        loop_var: row

    - name: Agregar hosts dinámicamente al grupo 'dynamic_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: dynamic_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
        remote_tmp: /tmp/ansible
      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item

    - name: Agregar hosts dinámicamente al grupo 'grafana_hosts'
      add_host:
        name: "{{ item.IP }}"
        groups: grafana_hosts
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_password: "{{ item.Contraseña }}"
        ansible_connection: ssh
        ansible_ssh_pass: "{{ item.Contraseña }}"
      loop: "{{ grafana_csv_data }}"
      loop_control:
        loop_var: item

- name: Obtener información y verificar EoL de los servidores
  hosts: dynamic_hosts
  gather_facts: yes
  tasks:
    - name: Determinar la familia del sistema operativo
      set_fact:
        os_family: "Linux"

    - name: Mostrar información del sistema 
      debug:
        msg: "Distribución: {{ ansible_distribution }}, Versión: {{ ansible_distribution_version }}"
    - name: Verificar si NGINX está instalado
      command: which nginx
      register: nginx_installed
      ignore_errors: true

    - name: Verificar si Apache está instalado
      command: which apache2
      register: apache2_installed
      ignore_errors: true

    - name: Verificar si Apache (httpd) está instalado
      command: which httpd
      register: httpd_installed
      ignore_errors: true

    - name: Determinar el servidor web instalado
      set_fact:
        web_server: >-
          {% if nginx_installed.rc == 0 %}
            NGINX
          {% elif apache2_installed.rc == 0 %}
            Apache2
          {% elif httpd_installed.rc == 0 %}
            Apache (httpd)
          {% else %}
            No identificado
          {% endif %}

    - name: Mostrar el servidor web detectado
      debug:
        msg: "Servidor web instalado: {{ web_server }}"
    - name: "Obtener el certificado SSL desde el puerto {{ cert_check_port }}"
      shell: |
        echo | openssl s_client -servername {{ inventory_hostname }} \
                              -connect {{ inventory_hostname }}:{{ cert_check_port }} 2>/dev/null \
          | openssl x509 -noout -dates
      register: ssl_cert_info
      changed_when: false
      ignore_errors: true  # Para que no falle si algún servidor no responde o no tiene SSL

    - name: "Examinar si se obtuvo el certificado"
      fail:
        msg: "No se pudo obtener el certificado SSL desde {{ inventory_hostname }} en el puerto {{ cert_check_port }}."
      when: ssl_cert_info.stdout is not regex("notBefore=|notAfter=")

    - name: "Extraer la fecha de expiración (notAfter)"
      set_fact:
        ssl_cert_expiration_raw: "{{ ssl_cert_info.stdout | regex_search('notAfter=(.*)', '\\1') | trim }}"
      when: ssl_cert_info.stdout is not none

    - name: "Convertir fecha de expiración a formato date Ansible"
      set_fact:
        ssl_cert_expiration: "{{ ssl_cert_expiration_raw | to_datetime('%b %d %H:%M:%S %Y %Z') }}"
      when: ssl_cert_expiration_raw is defined

    - name: "Calcular días restantes para vencimiento"
      set_fact:
        days_left: "{{ (ssl_cert_expiration - ansible_date_time.iso8601 | to_datetime('%Y-%m-%dT%H:%M:%S%z')).days }}"
      when: ssl_cert_expiration is defined

    - name: "Mostrar resultado en pantalla (debug)"
      debug:
        msg: "El certificado de {{ inventory_hostname }} vence en {{ days_left }} días (Expira el: {{ ssl_cert_expiration }})."