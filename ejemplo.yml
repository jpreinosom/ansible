---
- name: Construir inventario dinámico a partir de CSV y usar llave inline
  hosts: localhost
  gather_facts: no

  vars:
    input_file: "{{ playbook_dir }}/inventory/webServer.csv"
    delimiter: ";"

  tasks:
    - name: Verificar que el archivo CSV existe
      stat:
        path: "{{ input_file }}"
      register: file_check

    - name: Fallar si el archivo de inventario no existe
      fail:
        msg: "El archivo de inventario {{ input_file }} no existe."
      when: not file_check.stat.exists

    - name: Fallar si el archivo está vacío
      fail:
        msg: "El archivo {{ input_file }} está vacío."
      when: file_check.stat.size == 0

    - name: Leer contenido del archivo CSV
      set_fact:
        csv_content: "{{ lookup('file', input_file) }}"

    - name: Extraer encabezados (primera línea)
      set_fact:
        headers: >-
          {{ 
            csv_content.splitlines() 
            | first 
            | split(delimiter) 
            | map('trim') 
            | list
          }}

    - name: Extraer filas (omitiendo la primera línea y vacías)
      set_fact:
        rows: >-
          {{ 
            csv_content.splitlines()[1:] 
            | reject('match', '^$') 
            | list
          }}

    - name: Validar que existan filas con datos
      fail:
        msg: "El archivo no tiene filas de datos (solo encabezados)."
      when: rows | length == 0

    - name: Separar columnas en cada fila
      set_fact:
        row_splits: "{{ rows | map('split', delimiter) | list }}"

    - name: Validar que cada fila tenga el mismo número de columnas que los encabezados
      fail:
        msg: "La fila {{ row }} no coincide con el número de columnas de los encabezados."
      when: row | length != headers | length
      loop: "{{ row_splits }}"
      loop_control:
        loop_var: row

    - name: Combinar encabezados y filas en una lista de diccionarios
      set_fact:
        csv_data: "{{ csv_data | default([]) + [ dict(headers | zip(row)) ] }}"
      loop: "{{ row_splits }}"
      loop_control:
        loop_var: row

    - name: Crear hosts dinámicos con la llave "inline"
      add_host:
        name: "{{ item.IP }}"
        groups: "dynamic_hosts"
        ansible_host: "{{ item.IP }}"
        ansible_user: "{{ item.Usuario }}"
        ansible_private_key_file: /home/ansible/.ssh/id_rsa  # Ruta correcta a la clave privada
        remote_tmp: /tmp/ansible

      loop: "{{ csv_data }}"
      loop_control:
        loop_var: item


- name: Obtener información de los hosts dinámicos
  hosts: dynamic_hosts
  gather_facts: yes

  tasks:
    - name: Mostrar facts
      debug:
        msg: >
          Host: {{ inventory_hostname }} | 
          Distribución: {{ ansible_facts['distribution'] }}, 
          Versión: {{ ansible_facts['distribution_version'] }}
